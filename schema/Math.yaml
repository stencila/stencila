title: Math
'@id': stencila:Math
extends: Entity
category: math
abstract: true
description: Abstract base type for a mathematical variable or equation.
$comment: |
  This is a base type for `MathFragment` and `MathBlock` and should not
  normally be instantiated.
  This type has a similar structure and purpose to `CodeStatic` which is a base type
  for `CodeFragment`, `CodeBlock` etc.
required:
  - code
core:
  - mathLanguage
  - authors
  - provenance
properties:
  code:
    '@id': stencila:code
    description: The code of the equation in the `mathLanguage`.
    $ref: Cord
    strip: [code]
    patch:
      formats: [md, smd, myst, ipynb, qmd, latex]
    proptest:
      min:
        description: Generate a simple fixed string of math.
        value: Cord::from("math")
      low:
        description: |
          Generate a random string of up to 10 alphanumeric characters (exclude whitespace which 
          when leading or trailing causes issues for Markdown).
        strategy: r"[a-zA-Z0-9]{1,10}".prop_map(Cord::from)
      high:
        description: |
          Generate a random string of up to 100 characters (excluding control characters).
        strategy: r"[^\p{C}]{1,100}".prop_map(Cord::from)
      max:
        description: Generate an arbitrary string.
        strategy: String::arbitrary().prop_map(Cord::from)
  mathLanguage:
    '@id': stencila:mathLanguage
    description: The language used for the equation e.g tex, mathml, asciimath.
    $comment: Where necessary, the language is assumed to be TeX.
    type: string
    strip: [code]
    patch:
      formats: [md, smd, myst, ipynb, qmd]
    proptest:
      min:
        description: Fixed as TeX (for testing with Markdown which uses dollars to delimit TeX by default)
        value: Some(String::from("tex"))
      high:
        description: Generate a random string of up to 10 alphanumeric characters.
        strategy: option::of(r"[a-zA-Z0-9]{1,10}")
      max:
        description: Generate an arbitrary string.
        strategy: option::of(String::arbitrary())
  authors:
    '@id': schema:author
    description: The authors of the math.
    type: array
    items:
      $ref: Author
    strip: [authors]
    serde:
      deserializeWith: option_one_or_many_string_or_object
    dom:
      # Need to use <span> here to allow for both `MathBlock` and `MathInline`
      elem: span
  provenance:
    '@id': stencila:provenance
    description: A summary of the provenance of the math.
    type: array
    items:
      $ref: ProvenanceCount
    strip: [provenance]
    dom:
      elem: span
  compilationDigest:
    '@id': stencila:compilationDigest
    description: A digest of the `code` and `mathLanguage`.
    $comment: Used to avoid unnecessary transpilation to MathML.
    $ref: CompilationDigest
    strip: [compilation]
  compilationMessages:
    '@id': stencila:compilationMessages
    description: Messages generated while parsing and compiling the math expression.
    strip: [compilation]
    type: array
    items:
      $ref: CompilationMessage
  mathml:
    '@id': stencila:mathml
    description: The MathML transpiled from the `code`.
    $comment: Used along with `compilationDigest` to avoid unnecessary transpilation to MathML.
    html:
      content: true
    type: string
    strip: [output]
