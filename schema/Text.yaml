title: Text
'@id': schema:Text
extends: Entity
category: prose
description: Textual content.
$comment: |
  Intended mostly for use for inline text e.g. the text in a paragraph.
  
  Differs from the primitive `String` type in that it has a `type` and `id` property.
  The `id` property allows use to identify text nodes with a sequence of inline nodes
  for better diffing.
  
  Also, in Rust, the `value` property is implemented as a CRDT.
html:
  elem: span
jats:
  special: true
markdown:
  template: '{{value}}'
proptest: {}
required:
  - value
properties:
  value:
    '@id': 'schema:value'
    description: The value of the text content
    html:
      content: true
    proptest:
      min:
        description: Generate a fixed string of text.
        value: Cord::new("text")
      low:
        description: Generate a random string of up to 10 alphanumeric characters.
        strategy: r"[a-zA-Z0-9]{1,10}".prop_map(Cord::new)
      high:
        description: Generate a random string of up to 100 alphanumeric characters, some special characters commonly used in prose, and whitespace.
        strategy: r"[a-zA-Z0-9 \t\-_.!?*+-/()'<>=]{1,100}".prop_map(Cord::new)
      max:
        description: Generate an arbitrary string.
        strategy: String::arbitrary().prop_map(Cord::new)
    $ref: Cord
