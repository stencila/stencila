---
title: Code
description: |
  Design tokens and examples for customizing code styling in both inline and block contexts in Stencila themes.
---

# Tokens

## Font and Typography Tokens

Base tokens with semantic overrides for inline vs block contexts.

| Token                     | Description                                | Default Value               |
| ------------------------- | ------------------------------------------ | --------------------------- |
| `--code-color`            | Default code color                         | `var(--text-color-primary)` |
| `--code-font-family`      | Font family for all code elements          | `var(--font-family-mono)`   |
| `--code-font-size-inline` | Font size for inline `<code>` elements     | `var(--font-size-sm)`       |
| `--code-font-size-block`  | Font size for block `<pre><code>` elements | `var(--font-size-sm)`       |
| `--code-line-height`      | Line height for code blocks                | `var(--line-height-normal)` |

## Visual Style Tokens

Base tokens with semantic overrides for different contexts.

| Token                      | Description                       | Default Value                 |
| -------------------------- | --------------------------------- | ----------------------------- |
| `--code-background`        | Base background color for code    | `var(--color-gray-100)`       |
| `--code-background-inline` | Background color for inline code  | `var(--code-background)`      |
| `--code-background-block`  | Background color for code blocks  | `var(--code-background)`      |
| `--code-border-color`      | Border color for code elements    | `var(--border-color-muted)`   |
| `--code-border-width`      | Border width for code elements    | `var(--border-width-default)` |
| `--code-border-radius`     | Corner radius for code containers | `var(--radius-sm)`            |

> [!note]
> The `--code-border-radius` token only applies to static `<pre><code>` elements when no JavaScript view is loaded.

## Spacing Tokens

Padding tokens for different code contexts.

| Token                   | Description                                       | Default Value     |
| ----------------------- | ------------------------------------------------- | ----------------- |
| `--code-padding-inline` | Horizontal padding for inline `<code>` elements   | `var(--space-xs)` |
| `--code-padding-block`  | Vertical padding for block `<pre><code>` elements | `var(--space-4)`  |

## Editor Tokens

Core editor appearance and behavior:

| Token                                  | Description                    | Default Value                        |
| -------------------------------------- | ------------------------------ | ------------------------------------ |
| `--code-caret-color`                   | Cursor/caret color             | `var(--text-color-primary)`          |
| `--code-selection-background`          | Text selection background      | `var(--color-blue-200)`              |
| `--code-selection-match-background`    | Search match highlight         | `var(--color-blue-100)`              |
| `--code-focused-background`            | Editor background when focused | `var(--code-background)`             |
| `--code-cursor-line-background`        | Active line background         | `rgba(0, 0, 0, 0.02)`                |
| `--code-gutter-background`             | Gutter background color        | `var(--code-background)`             |
| `--code-gutter-color`                  | Line number color              | `var(--text-color-muted)`            |
| `--code-gutter-border-color`           | Gutter border color            | `var(--border-color-muted)`          |
| `--code-gutter-border-width`           | Gutter border width            | `var(--border-width-default)`        |
| `--code-gutter-padding`                | Gutter padding                 | `var(--space-3)`                     |
| `--code-gutter-min-width`              | Minimum gutter width           | `2.5rem`                             |
| `--code-gutter-active-line-background` | Active line gutter background  | `var(--code-cursor-line-background)` |
| `--code-gutter-active-line-color`      | Active line number color       | `var(--text-color-secondary)`        |

## Syntax Highlighting Tokens

Colors for different code elements:

| Token                            | Description             | Default Value               |
| -------------------------------- | ----------------------- | --------------------------- |
| `--syntax-comment`               | Comments                | `var(--color-green-600)`    |
| `--syntax-comment-block`         | Block comments          | `var(--syntax-comment)`     |
| `--syntax-comment-line`          | Line comments           | `var(--syntax-comment)`     |
| `--syntax-comment-doc`           | Documentation comments  | `var(--color-green-700)`    |
| `--syntax-keyword`               | Keywords                | `var(--color-blue-700)`     |
| `--syntax-keyword-control`       | Control flow keywords   | `var(--syntax-keyword)`     |
| `--syntax-keyword-operator`      | Operator keywords       | `var(--color-gray-600)`     |
| `--syntax-keyword-modifier`      | Modifier keywords       | `var(--syntax-keyword)`     |
| `--syntax-keyword-definition`    | Definition keywords     | `var(--syntax-keyword)`     |
| `--syntax-string`                | Strings                 | `var(--color-red-600)`      |
| `--syntax-string-special`        | Special strings         | `var(--color-red-700)`      |
| `--syntax-string-regex`          | Regular expressions     | `var(--color-red-600)`      |
| `--syntax-string-escape`         | String escape sequences | `var(--color-red-600)`      |
| `--syntax-number`                | Numbers                 | `var(--color-green-700)`    |
| `--syntax-number-integer`        | Integer numbers         | `var(--syntax-number)`      |
| `--syntax-number-float`          | Floating point numbers  | `var(--syntax-number)`      |
| `--syntax-boolean`               | Boolean values          | `var(--color-blue-700)`     |
| `--syntax-constant`              | Constants               | `var(--color-blue-700)`     |
| `--syntax-constant-builtin`      | Built-in constants      | `var(--syntax-constant)`    |
| `--syntax-variable`              | Variables               | `var(--color-blue-600)`     |
| `--syntax-variable-builtin`      | Built-in variables      | `var(--color-blue-600)`     |
| `--syntax-variable-special`      | Special variables       | `var(--color-red-700)`      |
| `--syntax-function`              | Functions               | `var(--color-amber-700)`    |
| `--syntax-function-builtin`      | Built-in functions      | `var(--color-amber-700)`    |
| `--syntax-function-method`       | Methods                 | `var(--syntax-function)`    |
| `--syntax-class`                 | Classes                 | `var(--color-amber-700)`    |
| `--syntax-class-builtin`         | Built-in classes        | `var(--syntax-class)`       |
| `--syntax-type`                  | Types                   | `var(--color-blue-300)`     |
| `--syntax-type-builtin`          | Built-in types          | `var(--syntax-type)`        |
| `--syntax-namespace`             | Namespaces              | `var(--color-gray-600)`     |
| `--syntax-property`              | Properties              | `var(--color-blue-600)`     |
| `--syntax-attribute`             | Attributes              | `var(--color-amber-600)`    |
| `--syntax-tag`                   | Tags (HTML/XML)         | `var(--color-green-600)`    |
| `--syntax-tag-angle`             | Tag angle brackets      | `var(--color-gray-600)`     |
| `--syntax-operator`              | Operators               | `var(--color-gray-600)`     |
| `--syntax-punctuation`           | Punctuation             | `var(--color-gray-600)`     |
| `--syntax-punctuation-bracket`   | Brackets                | `var(--syntax-punctuation)` |
| `--syntax-punctuation-delimiter` | Delimiters              | `var(--syntax-punctuation)` |
| `--syntax-meta`                  | Meta information        | `var(--color-gray-500)`     |
| `--syntax-invalid`               | Invalid code            | `var(--color-red-600)`      |
| `--syntax-invalid-deprecated`    | Deprecated code         | `var(--color-amber-700)`    |

# Usage

## Token Application

**Inline code** (`<code>`) uses:

- `--code-font-size-inline` - compact size for inline context
- `--code-background-inline` - subtle background highlighting
- `--code-padding-inline` for horizontal padding with minimal vertical padding

**Code blocks** (`<pre><code>`) use:

- `--code-font-size-block` - larger size for better readability
- `--code-background-block` - consistent with inline background
- `--code-padding-inline` for horizontal and `--code-padding-block` for generous vertical padding

**CodeMirror integration** is used for all code display in Stencila documents:

- **Static code blocks** (`<pre><code>`) use CodeMirror for syntax highlighting when JavaScript loads
- **Executable code chunks** use CodeMirror for both editing and display
- **Fallback styling** uses base code tokens when JavaScript fails to load

**Editor tokens** (`--code-*`) control the CodeMirror appearance and behavior:

- Used for all code blocks and chunks when CodeMirror loads
- Automatically inherit from base code tokens for consistency
- Can be customized independently for editor-specific styling

**Gutter and syntax tokens** provide fine-grained control:

- **Gutter tokens** (`--code-gutter-*`) control line numbers and margins
- **Syntax tokens** (`--syntax-*`) control code highlighting colors
- All tokens support CSS variables and adapt to theme changes automatically

# Examples

These examples of code blocks in popular languages allow you to preview how the `--code-` and `--syntax-` tokens work. Remember that both these sets of tokens are applied to static `CodeBlock` and executable `CodeChunk` nodes, even when they are not editable.

## Python

```python
# Statistical analysis for experimental data
import numpy as np
from scipy import stats

def analyze_experiment(data, control_group=None):
    """Calculate p-value for experimental results."""
    mean_effect = np.mean(data)  # Calculate mean effect size
    if control_group is not None:
        t_stat, p_value = stats.ttest_ind(data, control_group)
        return {'mean': mean_effect, 'p_value': p_value, 'significant': p_value < 0.05}
    return mean_effect
```

## R

```r
library(tidyverse)
library(broom)

# Analyze gene expression data
gene_analysis <- function(expression_matrix, metadata) {
  results <- expression_matrix %>%
    filter(gene_type == "protein_coding") %>%
    mutate(log_expression = log2(count + 1)) %>%
    group_by(sample_id) %>%
    summarise(median_expr = median(log_expression), .groups = "drop")

  return(results)
}
```

## JavaScript

```js
// Data tracking class for research experiments
class ExperimentTracker {
  constructor(studyId, sampleSize = 100) {
    this.studyId = studyId;
    this.sampleSize = sampleSize;
    this.results = [];  // Array to store measurements
  }

  async recordMeasurement(participant, measurement) {
    const timestamp = new Date().toISOString();  // ISO timestamp
    this.results.push({ participant, measurement, timestamp });
    return this.calculateStatistics();
  }
}
```

## SQL

```sql
-- Query to analyze biomarker data for recent patient cohort
SELECT
    p.patient_id,
    p.age_at_diagnosis,
    t.treatment_type,
    AVG(m.biomarker_value) AS mean_biomarker,  -- Average biomarker level
    COUNT(*) AS measurement_count             -- Number of measurements
FROM patients p
    INNER JOIN treatments t ON p.patient_id = t.patient_id
    LEFT JOIN measurements m ON p.patient_id = m.patient_id
WHERE p.diagnosis_date >= '2023-01-01'       -- Recent diagnoses only
    AND m.biomarker_name = 'IL-6'           -- Specific biomarker
GROUP BY p.patient_id, t.treatment_type
HAVING COUNT(*) >= 3;                        -- Minimum measurement threshold
```

# Patterns

## Technical Documentation

Clean, readable styling for technical content:

```css
:root {
  --code-font-size-inline: 0.875rem;
  --code-font-size-block: 0.875rem;
  --code-background: #f8f9fa;
  --code-background-inline: #f1f3f4;
  --code-border-radius: 4px;
  --code-padding-inline: 0.5rem;
  --code-padding-block: 1rem;

  /* Editor tokens for CodeMirror */
  --code-background: #f8f9fa;
  --code-gutter-background: #f0f0f0;
  --code-gutter-border-color: #e0e0e0;
  --syntax-keyword: #0066cc;
  --syntax-string: #008800;
  --syntax-comment: #888888;
}
```

```html raw
<div
  style="
  --code-font-size-inline: 0.875rem;
  --code-font-size-block: 0.875rem;
  --code-background: #f8f9fa;
  --code-background-inline: #f1f3f4;
  --code-border-radius: 4px;
  --code-padding-inline: 0.5rem;
  --code-padding-block: 1rem;
  --code-background: #f8f9fa;
  --code-gutter-background: #f0f0f0;
  --code-gutter-border-color: #e0e0e0;
  --syntax-keyword: #0066cc;
  --syntax-string: #008800;
  --syntax-comment: #888888;
  padding: 1rem;
"
>
  <h3>Installation</h3>
  <p>
    Install the package using <code>pip install research-toolkit</code> or
    <code>npm install research-toolkit</code> depending on your environment.
  </p>

  <p>For Python environments:</p>
  <pre><code>pip install research-toolkit
import research_toolkit as rt
rt.configure(api_key="your-key")</code></pre>
</div>
```

## Minimal Code Style

Subtle, unobtrusive code formatting:

```css
:root {
  --code-background: transparent;
  --code-background-inline: rgba(0, 0, 0, 0.05);
  --code-border-width: 0;
  --code-padding-inline: 0.25rem;
  --code-padding-block: 0.75rem;
  --code-border-radius: 2px;

  /* Subtle editor styling */
  --code-background: transparent;
  --code-gutter-background: transparent;
  --code-gutter-border-width: 0;
  --code-cursor-line-background: rgba(0, 0, 0, 0.03);
  --syntax-keyword: inherit;
  --syntax-string: inherit;
}
```

```html raw
<div
  style="
  --code-background: transparent;
  --code-background-inline: rgba(0, 0, 0, 0.05);
  --code-border-width: 0;
  --code-padding-inline: 0.25rem;
  --code-padding-block: 0.75rem;
  --code-border-radius: 2px;
  --code-background: transparent;
  --code-gutter-background: transparent;
  --code-gutter-border-width: 0;
  --code-cursor-line-background: rgba(0, 0, 0, 0.03);
  --syntax-keyword: inherit;
  --syntax-string: inherit;
  padding: 1rem;
"
>
  <h3>Data Analysis</h3>
  <p>
    Use the <code>analyze()</code> function to process your dataset. The
    function accepts parameters like <code>method="pearson"</code> for
    correlation analysis.
  </p>

  <p>Example workflow:</p>
  <pre><code>data = load_dataset("experiment.csv")
results = analyze(data, method="pearson")
print(results.summary())</code></pre>
</div>
```

## High Contrast Code

Bold, prominent styling for tutorials and learning materials:

```css
:root {
  --code-background: #2d3748;
  --code-background-inline: #e2e8f0;
  --code-font-size-inline: 0.9rem;
  --code-font-size-block: 1rem;
  --code-border-radius: 8px;
  --code-padding-inline: 0.75rem;
  --code-padding-block: 1.5rem;
  --code-border-width: 2px;
  --code-border-color: #4a5568;

  /* High contrast editor */
  --code-background: #2d3748;
  --code-color: #ffffff;
  --code-gutter-background: #1a202c;
  --code-gutter-color: #a0aec0;
  --code-selection-background: #4299e1;
  --syntax-keyword: #63b3ed;
  --syntax-string: #68d391;
  --syntax-comment: #a0aec0;
  --syntax-function: #f6ad55;
}
```

```html raw
<div
  style="
  --code-background: #2d3748;
  --code-background-inline: #e2e8f0;
  --code-font-size-inline: 0.9rem;
  --code-font-size-block: 1rem;
  --code-border-radius: 8px;
  --code-padding-inline: 0.75rem;
  --code-padding-block: 1.5rem;
  --code-border-width: 2px;
  --code-border-color: #4a5568;
  --code-background: #2d3748;
  --code-color: #ffffff;
  --code-gutter-background: #1a202c;
  --code-gutter-color: #a0aec0;
  --code-selection-background: #4299e1;
  --syntax-keyword: #63b3ed;
  --syntax-string: #68d391;
  --syntax-comment: #a0aec0;
  --syntax-function: #f6ad55;
  padding: 1rem;
"
>
  <h3>Machine Learning Pipeline</h3>
  <p>
    Import the required modules using
    <code>from sklearn import datasets</code> and
    <code>from sklearn.model_selection import train_test_split</code>.
  </p>

  <p>Complete example:</p>
  <pre><code>from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Load data
iris = datasets.load_iris()
X_train, X_test, y_train, y_test = train_test_split(
    iris.data, iris.target, test_size=0.3
)</code></pre>
</div>
```

## Academic Paper Style

Formal styling suitable for research publications:

```css
:root {
  --code-font-size-sm: 0.85rem;
  --code-font-size-md: 0.9rem;
  --code-background: #f7f7f7;
  --code-background-inline: #f0f0f0;
  --code-border-width: 1px;
  --code-border-color: #d0d0d0;
  --code-border-radius: 0;
  --code-padding-inline: 0.4rem;
  --code-padding-block: 1rem;
  --code-line-height: 1.4;
}
```

```html raw
<div
  style="
  --code-font-size-sm: 0.85rem;
  --code-font-size-md: 0.9rem;
  --code-background: #f7f7f7;
  --code-background-inline: #f0f0f0;
  --code-border-width: 1px;
  --code-border-color: #d0d0d0;
  --code-border-radius: 0;
  --code-padding-inline: 0.4rem;
  --code-padding-block: 1rem;
  --code-line-height: 1.4;
  padding: 1rem;
"
>
  <h3>Statistical Analysis</h3>
  <p>
    The analysis was performed using the <code>cor.test()</code> function in R
    version 4.3.0. Significance was set at <code>p < 0.05</code> for all tests.
  </p>

  <p>R code for correlation analysis:</p>
  <pre><code># Load required libraries
library(tidyverse)
library(corrplot)

# Perform correlation test
result <- cor.test(data$variable1, data$variable2,
                   method = "pearson")
print(result)</code></pre>
</div>
```

## Compact Terminal Style

Dense, console-like formatting:

```css
:root {
  --code-font-size-inline: 0.8rem;
  --code-font-size-block: 0.85rem;
  --code-background: #1a1a1a;
  --code-background-inline: #333;
  --code-border-radius: 0;
  --code-padding-inline: 0.5rem;
  --code-padding-block: 0.75rem;
  --code-line-height: 1.3;
  --code-border-width: 0;

  /* Terminal editor styling */
  --code-background: #1a1a1a;
  --code-color: #00ff00;
  --code-gutter-background: #1a1a1a;
  --code-gutter-color: #666666;
  --code-gutter-border-width: 0;
  --syntax-keyword: #00ffff;
  --syntax-string: #ffff00;
  --syntax-comment: #666666;
}
```

```html raw
<div
  style="
  --code-font-size-inline: 0.8rem;
  --code-font-size-block: 0.85rem;
  --code-background: #1a1a1a;
  --code-background-inline: #333;
  --code-border-radius: 0;
  --code-padding-inline: 0.5rem;
  --code-padding-block: 0.75rem;
  --code-line-height: 1.3;
  --code-border-width: 0;
  --code-background: #1a1a1a;
  --code-color: #00ff00;
  --code-gutter-background: #1a1a1a;
  --code-gutter-color: #666666;
  --code-gutter-border-width: 0;
  --syntax-keyword: #00ffff;
  --syntax-string: #ffff00;
  --syntax-comment: #666666;
  padding: 1rem;
"
>
  <h3>Command Line Usage</h3>
  <p>
    Run the analysis script with <code>python analyze.py --verbose</code> to see
    detailed output.
  </p>

  <p>Full command sequence:</p>
  <pre><code>$ cd research-project
$ python -m venv venv
$ source venv/bin/activate
$ pip install -r requirements.txt
$ python analyze.py --input data.csv --output results.json</code></pre>
</div>
```

# Tips

**Consistent font sizing**: Use a clear hierarchy with `--code-font-size-sm` for inline code and `--code-font-size-md` for blocks, typically 0.1-0.2rem smaller than body text.

**Background contrast**: Ensure sufficient contrast between `--code-background` and surrounding content, while keeping inline code subtle with `--code-background-inline`.

**Padding balance**: Use minimal horizontal padding for inline code but generous vertical padding for blocks (`--code-padding-block`) to improve readability.

**Border consistency**: Either use borders on all code elements or none - mixing bordered and borderless code can look inconsistent.

**Line height optimization**: Code blocks benefit from slightly tighter `--code-line-height` (1.3-1.5) than body text for better density.

**Consider context**: Technical documentation needs clear, readable code styling, while academic papers may prefer more subdued formatting.

**Test with real content**: Verify your tokens work well with both short snippets (`console.log()`) and longer code blocks with multiple lines.

**Accessibility**: Ensure code text maintains sufficient contrast ratios, especially when using custom background colors.

**Monospace consistency**: Always use `--code-font-family` with a proper monospace stack for predictable character alignment.
