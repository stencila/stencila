---
title: Code
description: |
  Design tokens and examples for customizing code styling in both inline and block contexts in Stencila themes.
---

# Tokens

## Font and Typography Tokens

Base tokens with semantic overrides for inline vs block contexts.

| Token                     | Description                                | Default Value               |
| ------------------------- | ------------------------------------------ | --------------------------- |
| `--code-color`            | Default code color                         | `var(--text-color-primary)` |
| `--code-font-family`      | Font family for all code elements          | `var(--font-family-mono)`   |
| `--code-font-size-inline` | Font size for inline `<code>` elements     | `var(--font-size-sm)`       |
| `--code-font-size-block`  | Font size for block `<pre><code>` elements | `var(--font-size-sm)`       |
| `--code-line-height`      | Line height for code blocks                | `var(--line-height-normal)` |

## Visual Style Tokens

Base tokens with semantic overrides for different contexts.

| Token                      | Description                       | Default Value                 |
| -------------------------- | --------------------------------- | ----------------------------- |
| `--code-background`        | Base background color for code    | `var(--color-gray-100)`       |
| `--code-background-inline` | Background color for inline code  | `var(--code-background)`      |
| `--code-background-block`  | Background color for code blocks  | `var(--code-background)`      |
| `--code-border-color`      | Border color for code elements    | `var(--border-color-muted)`   |
| `--code-border-width`      | Border width for code elements    | `var(--border-width-default)` |
| `--code-border-radius`     | Corner radius for code containers | `var(--radius-sm)`            |

> [!note]
> The `--code-border-radius` token only applies to static `<pre><code>` elements when no JavaScript view is loaded.

## Spacing Tokens

Padding tokens for different code contexts.

| Token                   | Description                                       | Default Value     |
| ----------------------- | ------------------------------------------------- | ----------------- |
| `--code-padding-inline` | Horizontal padding for inline `<code>` elements   | `var(--space-xs)` |
| `--code-padding-block`  | Vertical padding for block `<pre><code>` elements | `var(--space-4)`  |

## Editor Tokens

Core editor appearance and behavior:

| Token                                  | Description                    | Default Value                        |
| -------------------------------------- | ------------------------------ | ------------------------------------ |
| `--code-caret-color`                   | Cursor/caret color             | `var(--text-color-primary)`          |
| `--code-selection-background`          | Text selection background      | `var(--color-blue-200)`              |
| `--code-selection-match-background`    | Search match highlight         | `var(--color-blue-100)`              |
| `--code-focused-background`            | Editor background when focused | `var(--code-background)`             |
| `--code-cursor-line-background`        | Active line background         | `rgba(0, 0, 0, 0.02)`                |
| `--code-line-numbers`                  | Show/hide line numbers         | `hidden`                             |
| `--code-fold-gutter`                   | Show/hide code folding gutter  | `hidden`                             |
| `--code-gutter-background`             | Gutter background color        | `var(--code-background)`             |
| `--code-gutter-color`                  | Line number color              | `var(--text-color-muted)`            |
| `--code-gutter-border-color`           | Gutter border color            | `var(--border-color-muted)`          |
| `--code-gutter-border-width`           | Gutter border width            | `var(--border-width-default)`        |
| `--code-gutter-padding`                | Gutter padding                 | `var(--space-0)`                     |
| `--code-gutter-min-width`              | Minimum gutter width           | `2.5rem`                             |
| `--code-gutter-active-line-background` | Active line gutter background  | `var(--code-cursor-line-background)` |
| `--code-gutter-active-line-color`      | Active line number color       | `var(--text-color-secondary)`        |

> [!note]
> The `--code-gutter-*` tokens have no effect if both `--code-line-numbers` and `--code-fold-gutter` are `none` or `hidden`.

## Syntax Highlighting Tokens

Colors for different code elements:

| Token                          | Description             | Default Value             |
| ------------------------------ | ----------------------- | ------------------------- |
| `--code-comment`               | Comments                | `var(--color-green-600)`  |
| `--code-comment-block`         | Block comments          | `var(--code-comment)`     |
| `--code-comment-line`          | Line comments           | `var(--code-comment)`     |
| `--code-comment-doc`           | Documentation comments  | `var(--color-green-700)`  |
| `--code-keyword`               | Keywords                | `var(--color-blue-700)`   |
| `--code-keyword-control`       | Control flow keywords   | `var(--code-keyword)`     |
| `--code-keyword-operator`      | Operator keywords       | `var(--color-gray-600)`   |
| `--code-keyword-modifier`      | Modifier keywords       | `var(--code-keyword)`     |
| `--code-keyword-definition`    | Definition keywords     | `var(--code-keyword)`     |
| `--code-string`                | Strings                 | `var(--color-red-600)`    |
| `--code-string-special`        | Special strings         | `var(--color-red-700)`    |
| `--code-string-regex`          | Regular expressions     | `var(--color-red-600)`    |
| `--code-string-escape`         | String escape sequences | `var(--code-red-600)`     |
| `--code-number`                | Numbers                 | `var(--color-green-700)`  |
| `--code-number-integer`        | Integer numbers         | `var(--code-number)`      |
| `--code-number-float`          | Floating point numbers  | `var(--code-number)`      |
| `--code-boolean`               | Boolean values          | `var(--color-blue-700)`   |
| `--code-constant`              | Constants               | `var(--color-blue-700)`   |
| `--code-constant-builtin`      | Built-in constants      | `var(--code-constant)`    |
| `--code-variable`              | Variables               | `var(--color-blue-600)`   |
| `--code-variable-builtin`      | Built-in variables      | `var(--color-blue-600)`   |
| `--code-variable-special`      | Special variables       | `var(--color-red-700)`    |
| `--code-function`              | Functions               | `var(--color-amber-700)`  |
| `--code-function-builtin`      | Built-in functions      | `var(--color-amber-700)`  |
| `--code-function-method`       | Methods                 | `var(--code-function)`    |
| `--code-class`                 | Classes                 | `var(--color-amber-700)`  |
| `--code-class-builtin`         | Built-in classes        | `var(--code-class)`       |
| `--code-type`                  | Types                   | `var(--color-blue-700)`   |
| `--code-type-builtin`          | Built-in types          | `var(--code-type)`        |
| `--code-namespace`             | Namespaces              | `var(--color-gray-600)`   |
| `--code-property`              | Properties              | `var(--color-blue-600)`   |
| `--code-attribute`             | Attributes              | `var(--color-amber-600)`  |
| `--code-tag`                   | Tags (HTML/XML)         | `var(--color-green-600)`  |
| `--code-tag-angle`             | Tag angle brackets      | `var(--color-gray-600)`   |
| `--code-operator`              | Operators               | `var(--color-gray-600)`   |
| `--code-punctuation`           | Punctuation             | `var(--color-gray-600)`   |
| `--code-punctuation-bracket`   | Brackets                | `var(--code-punctuation)` |
| `--code-punctuation-delimiter` | Delimiters              | `var(--code-punctuation)` |
| `--code-meta`                  | Meta information        | `var(--color-gray-500)`   |
| `--code-invalid`               | Invalid code            | `var(--color-red-600)`    |
| `--code-invalid-deprecated`    | Deprecated code         | `var(--color-amber-700)`  |

# Usage

## Token Application

**Inline code** (`<code>`) uses:

- `--code-font-size-inline` - compact size for inline context
- `--code-background-inline` - subtle background highlighting
- `--code-padding-inline` for horizontal padding with minimal vertical padding

**Code blocks** (`<pre><code>`) use:

- `--code-font-size-block` - larger size for better readability
- `--code-background-block` - consistent with inline background
- `--code-padding-inline` for horizontal and `--code-padding-block` for generous vertical padding

**CodeMirror integration** is used for all code display in Stencila documents:

- **Static code blocks** (`<pre><code>`) use CodeMirror for syntax highlighting when JavaScript loads
- **Executable code chunks** use CodeMirror for both editing and display
- **Fallback styling** uses base code tokens when JavaScript fails to load

**Editor tokens** (`--code-*`) control the CodeMirror appearance and behavior:

- Used for all code blocks and chunks when CodeMirror loads
- Automatically inherit from base code tokens for consistency
- Can be customized independently for editor-specific styling

**Gutter and syntax tokens** provide fine-grained control:

- **Gutter tokens** (`--code-gutter-*`) control line numbers and margins
- **Syntax tokens** (`--code-*`) control code highlighting colors
- All tokens support CSS variables and adapt to theme changes automatically

# Examples

These examples of code blocks in popular languages allow you to preview how the `--code-*` tokens work. Remember that these tokens are applied to both static `CodeBlock` and executable `CodeChunk` nodes, even when they are not editable.

## Python

```python
# Statistical analysis for experimental data
import numpy as np
from scipy import stats

def analyze_experiment(data, control_group=None):
    """Calculate p-value for experimental results."""
    mean_effect = np.mean(data)  # Calculate mean effect size
    if control_group is not None:
        t_stat, p_value = stats.ttest_ind(data, control_group)
        return {'mean': mean_effect, 'p_value': p_value, 'significant': p_value < 0.05}
    return mean_effect
```

## R

```r
library(tidyverse)
library(broom)

# Analyze gene expression data
gene_analysis <- function(expression_matrix, metadata) {
  results <- expression_matrix %>%
    filter(gene_type == "protein_coding") %>%
    mutate(log_expression = log2(count + 1)) %>%
    group_by(sample_id) %>%
    summarise(median_expr = median(log_expression), .groups = "drop")

  return(results)
}
```

## JavaScript

```js
// Data tracking class for research experiments
class ExperimentTracker {
  constructor(studyId, sampleSize = 100) {
    this.studyId = studyId;
    this.sampleSize = sampleSize;
    this.results = []; // Array to store measurements
  }

  async recordMeasurement(participant, measurement) {
    const timestamp = new Date().toISOString(); // ISO timestamp
    this.results.push({ participant, measurement, timestamp });
    return this.calculateStatistics();
  }
}
```

## SQL

```sql
-- Query to analyze biomarker data for recent patient cohort
SELECT
    p.patient_id,
    p.age_at_diagnosis,
    t.treatment_type,
    AVG(m.biomarker_value) AS mean_biomarker,  -- Average biomarker level
    COUNT(*) AS measurement_count             -- Number of measurements
FROM patients p
    INNER JOIN treatments t ON p.patient_id = t.patient_id
    LEFT JOIN measurements m ON p.patient_id = m.patient_id
WHERE p.diagnosis_date >= '2023-01-01'       -- Recent diagnoses only
    AND m.biomarker_name = 'IL-6'           -- Specific biomarker
GROUP BY p.patient_id, t.treatment_type
HAVING COUNT(*) >= 3;                        -- Minimum measurement threshold
```

## Default Code

Standard code styling with syntax highlighting and readable typography:

```css
:root {
  /* No design token overrides */
}
```

::: style

### Inline Code

This paragraph contains `inline code` that demonstrates the default styling with appropriate background highlighting and font selection for readability.

### Code Blocks

```python
def fibonacci(n):
    """Generate Fibonacci sequence up to n."""
    if n <= 0:
        return []
    elif n == 1:
        return [0]

    sequence = [0, 1]
    while len(sequence) < n:
        next_val = sequence[-1] + sequence[-2]
        sequence.append(next_val)

    return sequence

# Example usage
result = fibonacci(10)
print(f"First 10 Fibonacci numbers: {result}")
```
:::

## Technical Documentation

Clean, readable styling for technical content:

```css
:root {
  --code-font-size-inline: var(--font-size-sm);
  --code-font-size-block: var(--font-size-sm);
  --code-border-radius: var(--radius-sm);
  --code-padding-inline: var(--space-xs);
  --code-padding-block: var(--space-4);
  --code-keyword: var(--color-blue-600);
  --code-string: var(--color-green-700);
  --code-comment-line: var(--color-gray-500);
}
```

```html raw
<div
  style="
  --code-font-size-inline: var(--font-size-sm);
  --code-font-size-block: var(--font-size-sm);
  --code-border-radius: var(--radius-sm);
  --code-padding-inline: var(--space-xs);
  --code-padding-block: var(--space-4);
  --code-keyword: var(--color-blue-600);
  --code-string: var(--color-green-700);
  --code-comment-line: var(--color-gray-500);
"
>
  <p>
    e.g. Install using <code>pip install research-toolkit</code> and configure
    with your API key.
  </p>

  <stencila-code-block
    depth="1"
    programming-language="python"
    code="# Configure tool
import research_toolkit as rt
rt.configure(api_key='your-key')"
  >
  </stencila-code-block>
</div>
```

## Minimal Code Style

Subtle, unobtrusive code formatting:

```css
:root {
  --code-border-width: var(--space-0);
  --code-padding-inline: var(--space-0);
  --code-padding-block: var(--space-1);
  --code-gutter-border-width: var(--space-0);
  --code-line-numbers: none;
  --code-fold-gutter: none;
}
```

```html raw
<div
  style="
  --code-border-width: var(--space-0);
  --code-padding-inline: var(--space-0);
  --code-padding-block: var(--space-1);
  --code-gutter-border-width: var(--space-0);
  --code-line-numbers: none;
  --code-fold-gutter: none;
"
>
  <p>
    e.g. Use <code>analyze(method="pearson")</code> to process datasets with
    correlation analysis.
  </p>

  <stencila-code-block
    depth="1"
    programming-language="python"
    code="data = load_dataset('experiment.csv')
results = analyze(data, method='pearson')
print(results.summary())"
  >
  </stencila-code-block>
</div>
```

## High Contrast Code

Bold, prominent styling for tutorials and learning materials:

```css
:root {
  --code-font-size-inline: var(--font-size-md);
  --code-font-size-block: var(--font-size-md);
  --code-padding-inline: var(--space-2);
  --code-line-numbers: none;
  --code-keyword: var(--color-red-400);
  --code-string: var(--color-green-400);
  --code-comment-line: var(--color-gray-400);
  --code-function: var(--color-amber-500);
}
```

```html raw
<div
  style="
  --code-font-size-inline: var(--font-size-md);
  --code-font-size-block: var(--font-size-md);
  --code-padding-inline: var(--space-2);
  --code-line-numbers: none;
  --code-fold-gutter: none;
  --code-keyword: var(--color-red-400);
  --code-string: var(--color-green-400);
  --code-comment-line: var(--color-gray-400);
  --code-function: var(--color-amber-500);
"
>
  <p>
    e.g. Import modules like <code>from sklearn import datasets</code> for
    machine learning pipelines.
  </p>

  <stencila-code-block
    depth="1"
    programming-language="python"
    code="from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Load and split data
iris = datasets.load_iris()
X_train, X_test, y_train, y_test = train_test_split(
    iris.data, iris.target, test_size=0.3
)"
  >
  </stencila-code-block>
</div>
```

# Tips

**Size tokens**: Use `--font-size-sm` for both `--code-font-size-inline` and `--code-font-size-block` to maintain consistency with the design system.

**Padding hierarchy**: Inline code needs minimal padding (`--space-xs`), while blocks need generous vertical padding (`--space-4`) for readability.

**Border removal**: Set `--code-border-width: var(--space-0)` and `--code-gutter-border-width: var(--space-0)` for minimal styling patterns.

**Gutter styling**: Use muted colors like `--color-gray-400` for `--code-gutter-color` and darker backgrounds like `--color-gray-800` for high contrast themes.

**Syntax color balance**: Keywords (`--code-keyword`) should use strong colors like `--color-blue-600`, while comments (`--code-comment`) work best with muted grays like `--color-gray-500`.

**Background coordination**: Keep `--code-background-inline` and `--code-background-block` consistent, typically using `--color-gray-100` or similar light backgrounds.

**Selection visibility**: Use `--color-blue-200` for `--code-selection-background` to ensure clear text selection without overwhelming syntax colors.
