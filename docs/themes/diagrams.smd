---
title: Diagrams
description: |
  Design tokens and examples for customizing diagram styling in Stencila themes, supporting Mermaid.js and Cytoscape.js visualizations.
---

# Tokens

## Base Color Token

The foundation token from which all diagram colors are calculated.

| Token                       | Description                                   | Default Value              |
| --------------------------- | --------------------------------------------- | -------------------------- |
| `--diagram-base-color`      | Base color for all diagram color calculations | `var(--color-accent)`      |
| `--diagram-base-color-dark` | Base color for dark mode                      | `var(--color-accent-dark)` |

## Core Diagram Tokens

Base styling tokens that apply to all diagram types.

| Token                   | Description                   | Default Value                                                                  |
| ----------------------- | ----------------------------- | ------------------------------------------------------------------------------ |
| `--diagram-background`  | Background color for diagrams | `var(--surface-foreground)`                                                    |
| `--diagram-font-family` | Font family for diagram text  | `var(--font-family-sans)`                                                      |
| `--diagram-font-size`   | Font size for diagram text    | `var(--font-size-sm)`                                                          |
| `--diagram-text-color`  | Primary text color            | `color-mix(in srgb, var(--diagram-base-color) 95%, var(--diagram-background))` |

## Node and Shape Tokens

Colors and styling for diagram nodes, shapes, and containers. All colors calculated from `--diagram-base-color` mixed with `--diagram-background`.

| Token                                 | Description                          | Calculation                                                                    |
| ------------------------------------- | ------------------------------------ | ------------------------------------------------------------------------------ |
| `--diagram-node-background`           | Primary node/shape fill color        | `color-mix(in srgb, var(--diagram-base-color) 15%, var(--diagram-background))` |
| `--diagram-node-background-secondary` | Secondary node background            | `color-mix(in srgb, var(--diagram-base-color) 25%, var(--diagram-background))` |
| `--diagram-node-background-tertiary`  | Tertiary node background (3+ states) | `color-mix(in srgb, var(--diagram-base-color) 35%, var(--diagram-background))` |
| `--diagram-node-border-color`         | Node border color                    | `color-mix(in srgb, var(--diagram-base-color) 35%, var(--diagram-background))` |
| `--diagram-node-border-width`         | Node border width                    | `var(--border-width-thick)`                                                    |
| `--diagram-node-text-color`           | Text color inside nodes              | `var(--diagram-text-color)`                                                    |

## Edge and Connection Tokens

Styling for lines, arrows, and connections between diagram nodes.

| Token                       | Description           | Calculation                                                                    |
| --------------------------- | --------------------- | ------------------------------------------------------------------------------ |
| `--diagram-edge-color`      | Line/edge color       | `color-mix(in srgb, var(--diagram-base-color) 60%, var(--diagram-background))` |
| `--diagram-edge-width`      | Line/edge width       | `var(--border-width-default)`                                                  |
| `--diagram-edge-text-color` | Edge label text color | `var(--diagram-text-color)`                                                    |

## State Tokens

Generic state tokens applicable across diagram types (Gantt tasks, state diagrams, etc.).

| Token                             | Description                            | Default Value                              |
| --------------------------------- | -------------------------------------- | ------------------------------------------ |
| `--diagram-active-background`     | Background for active states           | `var(--diagram-node-background-tertiary)`  |
| `--diagram-active-border-color`   | Border for active states               | `var(--diagram-node-border-color)`         |
| `--diagram-inactive-background`   | Background for inactive/default states | `var(--diagram-node-background)`           |
| `--diagram-inactive-border-color` | Border for inactive/default states     | `var(--diagram-node-border-color)`         |
| `--diagram-complete-background`   | Background for completed states        | `var(--diagram-node-background-secondary)` |
| `--diagram-complete-border-color` | Border for completed states            | `var(--diagram-node-border-color)`         |

## Structure Tokens

Tokens for structural diagram elements like grids, sections, and groupings.

| Token                          | Description                         | Calculation                                                                    |
| ------------------------------ | ----------------------------------- | ------------------------------------------------------------------------------ |
| `--diagram-grid-color`         | Grid line color                     | `var(--diagram-base-color)`                                                    |
| `--diagram-section-background` | Section/cluster/subgraph background | `color-mix(in srgb, var(--diagram-base-color) 10%, var(--diagram-background))` |

# Usage

## Base Color System

All diagram colors derive from a single base color for automatic theme integration:

**`--diagram-base-color`** is the foundation:

- Defaults to `var(--color-accent)` - diagrams automatically match your theme's accent color
- All node, edge, and text colors are calculated from this base using `color-mix()`
- Change one token to restyle entire diagrams

**Quick theme changes**:

```css
/* Override base color for all diagrams */
:root {
  --diagram-base-color: var(--color-success); /* Green diagrams */
}
```

**Fine-grained control**:

```css
/* Override specific calculated values */
:root {
  --diagram-base-color: var(--color-purple-600);
  --diagram-node-background: var(--color-purple-50); /* Override calculation */
  --diagram-edge-color: var(--color-purple-800); /* Different from base */
}
```

**Color calculations**: All colors are calculated using consistent percentages in both light and dark modes by mixing `--diagram-base-color` with `--diagram-background`:

- Text: 95% base color
- Node backgrounds: 15%, 25%, 35% base color (primary, secondary, tertiary)
- Node borders: 35% base color
- Edges: 60% base color
- Sections/clusters: 10% base color

**State tokens**: Provide semantic control over different element states:

- Inactive (default): Uses primary node background
- Active: Uses tertiary node background (most saturated)
- Complete: Uses secondary node background (middle saturation)
- All state borders default to node border color

This unified approach ensures diagrams adapt naturally to both light and dark themes without separate color logic. See token tables above for specific calculations.

**Limitation**: Examples below cannot demonstrate inline token overrides since diagram theming reads from `document.documentElement`. To test custom styling, create a custom theme file with token overrides.

## Tool Integration

**Mermaid.js integration** uses the `base` theme with `themeVariables`:

- All diagram tokens are automatically mapped to Mermaid's theme variables
- Colors are converted from CSS custom properties to hex format as required by Mermaid
- Computed values from `color-mix()` are converted from `color(srgb ...)` to hex
- Theme is applied during diagram initialization and cached for performance

**Cytoscape.js integration** uses style objects:

- Subset of diagram tokens mapped to Cytoscape style properties
- Theme styles are merged with existing graph styles if present
- Applied during graph initialization and cached for performance

**Dark mode**: All color tokens have `-dark` variants that automatically apply when system prefers dark mode or user explicitly sets dark theme.

# Examples

These examples demonstrate how the theming system applies across different Mermaid diagram types. Each example tests different aspects of the token system.

## Flowchart

Tests node backgrounds, decision diamonds, edge colors, and edge labels.

```mermaid exec
flowchart
  A[Data Collection] --> B{Quality Check}
  B -->|Pass| C[Analysis]
  B -->|Fail| D[Data Cleaning]
  D --> B
  C --> E[Results]
```

## Sequence Diagram

Tests actor backgrounds/borders, signal colors, and activation boxes (uses secondary background).

```mermaid exec
sequenceDiagram
  participant R as Researcher
  participant DS as Data Scientist
  participant DB as Database

  R->>DS: Submit data
  activate DS
  DS->>DB: Store data
  DB-->>DS: Confirmation
  DS->>DS: Quality check
  deactivate DS
  DS-->>R: Analysis results
```

## State Diagram

Tests state node backgrounds, transition colors, and special state indicators. Uses `--diagram-node-background` variants for different states.

```mermaid exec
stateDiagram-v2
  [*] --> Idle
  Idle --> Processing : Start
  Processing --> Analyzing : Data Valid
  Processing --> Error : Data Invalid
  Analyzing --> Complete
  Error --> Idle : Retry
  Complete --> [*]
```

## Class Diagram

Tests node hierarchy with different visibility levels using primary/secondary/tertiary backgrounds.

```mermaid exec
classDiagram
  class DataProcessor {
    +String id
    +process()
    -validate()
  }
  class Analyzer {
    +analyze()
    #calculate()
  }
  class Storage {
    +save()
    +load()
  }
  DataProcessor --> Analyzer
  Analyzer --> Storage
```

## Entity Relationship Diagram

Tests entity boxes, relationship lines, and cardinality labels.

```mermaid exec
erDiagram
  Experiment ||--|{ Dataset : generates
  Dataset ||--o{ Analysis : undergoes
  Analysis }o--|| Publication : produces
```

## Gantt Chart

Tests timeline bars using `--diagram-node-background` variants for different task states (done/active/future).

```mermaid exec
gantt
  title Research Timeline
  dateFormat YYYY-MM-DD
  section Planning
    Literature Review    :done, 2024-01-01, 10d
    Study Design        :done, 2024-01-08, 7d
  section Data
    Collection     :active, 2024-01-12, 8d
    Cleaning       :2024-01-18, 6d
  section Analysis
    Statistics :2024-01-20, 8d
    Modeling   :2024-01-24, 7d
  section Results
    Visualization :2024-01-28, 5d
    Interpretation :2024-01-30, 5d
  section Writing
    Draft     :2024-02-02, 8d
    Revision  :2024-02-08, 4d
```

## Cytoscape Network Graph

Tests node styling, edge styling, and state selectors (selected nodes use active colors).

```cytoscape exec
{
  "elements": {
    "nodes": [
      { "data": { "id": "data", "label": "Data Collection" } },
      { "data": { "id": "check", "label": "Quality Check" } },
      { "data": { "id": "clean", "label": "Data Cleaning" } },
      { "data": { "id": "analysis", "label": "Analysis" } },
      { "data": { "id": "results", "label": "Results" } }
    ],
    "edges": [
      {
        "data": {
          "id": "e1",
          "source": "data",
          "target": "check",
          "label": "submit"
        }
      },
      {
        "data": {
          "id": "e2",
          "source": "check",
          "target": "analysis",
          "label": "pass"
        }
      },
      {
        "data": {
          "id": "e3",
          "source": "check",
          "target": "clean",
          "label": "fail"
        }
      },
      {
        "data": {
          "id": "e5",
          "source": "analysis",
          "target": "results",
          "label": "complete"
        }
      }
    ]
  },
  "style": [
    {
      "selector": "node",
      "style": { "label": "data(label)" }
    },
    {
      "selector": "edge",
      "sty1le": { "label": "data(label)" }
    }
  ]
}
```

# Tips

**Color coordination**: Use color families like `--color-blue-*` for node backgrounds and borders to maintain visual harmony across diagram elements.

**Font sizing**: Keep `--diagram-font-size` at `--font-size-sm` or smaller to prevent text from overwhelming diagram shapes and maintain readability.

**Edge visibility**: Use `--color-gray-600` or darker for `--diagram-edge-color` to ensure connections are clearly visible against light backgrounds.

**Node hierarchy**: Utilize the three node background tokens (`background`, `background-secondary`, `background-tertiary`) to create visual hierarchy in complex diagrams.

**Text hierarchy**: Use `--diagram-text-color` as the base and override `--diagram-node-text-color` or `--diagram-edge-text-color` only when you need specific customization.

**Actor styling**: For sequence diagrams, coordinate `--diagram-actor-background` with `--diagram-node-background` while using a neutral color like `--color-gray-100`.

**Cluster differentiation**: Keep `--diagram-cluster-background` subtle (like `--color-gray-50`) to group elements without competing with main content.

**Dark mode consideration**: Ensure sufficient contrast between node backgrounds and text colors, especially when using colored backgrounds in dark themes.

**Tool consistency**: Both Mermaid and Cytoscape inherit from the same tokens, so diagram appearance remains consistent regardless of the underlying visualization tool.
