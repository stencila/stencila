---
title: Paragraphs
description: |
  Design tokens and examples for customizing paragraph spacing, alignment, and typography in Stencila themes.
---

# Tokens

## Spacing and Typography Tokens

Paragraph-specific controls for spacing, typography, alignment, and text flow.

| Token                     | Description                                     | Default Value             |
| ------------------------- | ----------------------------------------------- | ------------------------- |
| `--paragraph-spacing`     | Paragraph spacing (responsive)                  | `var(--content-spacing)`  |
| `--paragraph-line-height` | Line height within paragraphs                   | `var(--text-line-height)` |
| `--paragraph-text-align`  | Text alignment (left, right, center, justify)   | `left`                    |
| `--paragraph-text-indent` | First-line indentation                          | `0`                       |
| `--paragraph-hyphens`     | Hyphenation control (none, auto, manual)        | `none`                    |
| `--paragraph-orphans`     | Minimum lines at bottom of page/column break    | `2`                       |
| `--paragraph-widows`      | Minimum lines at top of page/column break       | `2`                       |
| `--paragraph-text-wrap`   | Text wrapping algorithm (auto, pretty, balance) | `auto`                    |

## Lead Paragraph Tokens

Special styling for the first paragraph after headings.

| Token                          | Description                                | Default Value |
| ------------------------------ | ------------------------------------------ | ------------- |
| `--paragraph-lead-font-size`   | Font size for lead paragraphs              | `inherit`     |
| `--paragraph-lead-font-weight` | Font weight for lead paragraphs            | `inherit`     |
| `--paragraph-lead-text-indent` | First-line indentation for lead paragraphs | `0`           |

# Usage

## Paragraph-Specific Customization

Use paragraph tokens to customize typography and layout for different document contexts:

**`--paragraph-spacing`**: Controls spacing between paragraphs. References `--content-spacing` by default, which provides automatic responsive behavior (desktop: 2rem, tablet: 1.5rem, mobile: 1rem, print: 0.5rem). This inheritance means paragraphs automatically scale with document rhythm without needing explicit responsive variants.

**`--paragraph-line-height`**: Controls line spacing within paragraphs. References `--text-line-height` by default but can be customized for specific reading contexts.

**`--paragraph-text-align`**: Choose alignment based on document style:

- `left` - Web and technical documentation (default)
- `justify` - Scholarly papers and formal documents
- `center` - Special layouts or emphasis
- `right` - Specialized design contexts

**Lead paragraphs**: First paragraphs after headings automatically receive enhanced styling. Use `--paragraph-lead-font-size` and `--paragraph-lead-font-weight` to emphasize opening content.

## Integration with Semantic Tokens

Paragraphs work with the design system's responsive tokens:

- **Automatic responsive behavior**: Spacing uses `--content-spacing` which automatically provides desktop (2rem), tablet (1.5rem), mobile (1rem), and print (0.5rem) variants without explicit media queries
- **Content width optimization**: Uses `--content-width` for optimal reading line lengths across devices
- **Typography inheritance**: Base typography and colors inherit from semantic text tokens, including automatic dark mode support through `--text-color-primary`
- **System-wide consistency**: Changes to semantic tokens automatically propagate to paragraphs, maintaining design coherence

## Text Flow and Advanced Features

**Text indentation**: Use `--paragraph-text-indent` for traditional scholarly formatting:

- `0` - Web/modern style (no indent, default)
- `1.5em` - Standard scholarly indent
- `1.463rem` - Traditional LaTeX paragraph indent

**Hyphenation**: Control word breaking with `--paragraph-hyphens`:

- `none` - No hyphenation (web default)
- `auto` - Automatic hyphenation (recommended for justified text)
- `manual` - Only break at explicit hyphens

**Print control**: Use `--paragraph-orphans` and `--paragraph-widows` to prevent awkward line breaks across pages/columns.

**Modern text wrapping**: Set `--paragraph-text-wrap: pretty` for improved line breaking in supported browsers.

# Patterns

## Research Paper Style

Traditional scholarly document with justified text and paragraph indentation:

```css
:root {
  --paragraph-text-align: justify;
  --paragraph-text-indent: 1.5em;
  --paragraph-hyphens: auto;
}
```

::: style --paragraph-text-align: justify; --paragraph-text-indent: 1.5em; --paragraph-hyphens: auto;

We conducted a randomized controlled trial to evaluate the effectiveness of the proposed algorithm. Participants were recruited from three research institutions across North America between January 2023 and March 2024.

The primary endpoint was computational efficiency measured in operations per second. Secondary endpoints included memory usage, error rates, and user satisfaction scores collected via standardized questionnaires.

Statistical analysis was performed using R version 4.3.0. All tests were two-tailed with significance set at p < 0.05. Missing data were handled using multiple imputation techniques.

:::

## Scientific Journal

Professional layout with lead paragraphs and enhanced typography:

```css
:root {
  --paragraph-text-align: justify;
  --paragraph-hyphens: auto;
  --paragraph-lead-font-size: var(--font-size-lg);
  --paragraph-lead-font-weight: var(--font-weight-medium);
  --paragraph-orphans: 3;
  --paragraph-widows: 3;
}
```

::: style --paragraph-text-align: justify; --paragraph-hyphens: auto; --paragraph-lead-font-size: var(--font-size-lg); --paragraph-lead-font-weight: var(--font-weight-medium); --paragraph-orphans: 3; --paragraph-widows: 3;

### Abstract

Machine learning algorithms have shown promising results in predicting protein folding structures, but computational complexity remains a significant barrier to widespread adoption in clinical settings.

This study presents a novel approach combining transformer architectures with physics-based constraints to achieve 95% accuracy while reducing computational time by 60% compared to existing methods.

Our results demonstrate that hybrid models can bridge the gap between theoretical precision and practical implementation, opening new possibilities for real-time protein structure prediction in drug discovery pipelines.

:::

## Thesis Chapter

Generous spacing for long-form scholarly reading:

```css
:root {
  --paragraph-spacing: var(--space-10);
  --paragraph-text-align: left;
  --paragraph-line-height: var(--line-height-md);
  --paragraph-text-wrap: pretty;
}
```

::: style --paragraph-spacing: var(--space-10); --paragraph-text-align: left; --paragraph-line-height: var(--line-height-md); --paragraph-text-wrap: pretty;

The field of computational biology has witnessed remarkable advances in the past decade, driven largely by the availability of large datasets and improved algorithmic approaches. Early work by Smith et al. (2018) laid the foundation for sequence-based prediction methods.

Subsequent research has focused on integrating multiple data modalities, including structural information, evolutionary relationships, and functional annotations. The breakthrough came with the introduction of attention mechanisms, which allowed models to capture long-range dependencies in protein sequences.

:::

## References Section

Dense layout for appendices, bibliographies, and reference materials:

```css
:root {
  --paragraph-spacing: var(--space-3);
  --paragraph-text-indent: -1.5em;
  --paragraph-lead-text-indent: -1.5em;
}
```

::: style --paragraph-spacing: var(--space-3); --paragraph-text-indent: -1.5em; --paragraph-lead-text-indent: -1.5em; padding-left: 1.5em;

Johnson, A., Smith, B., & Davis, C. (2024). Advances in computational protein folding prediction using transformer architectures. _Nature Computational Biology_, 15(3), 234-251.

Williams, D. E., & Brown, F. G. (2023). Machine learning approaches to drug discovery: A comprehensive review of recent developments and future directions. _Journal of Medicinal Chemistry_, 66(12), 8123-8145.

Zhang, L., Kumar, R., & Patel, S. (2024). Real-time protein structure prediction in clinical environments: Challenges and opportunities. _Bioinformatics_, 40(8), 1456-1468.

:::

# Tips

**Focus on paragraph tokens**: Use `--paragraph-*` tokens for typography-specific customizations. These integrate with the design system while providing paragraph-specific control.

**Choose alignment for context**: Use `--paragraph-text-align: left` for web/technical content, `justify` for scholarly papers, but ensure proper hyphenation with justified text.

**Customize line height thoughtfully**: Use `--paragraph-line-height` to override the default text line height when specific reading contexts require it (e.g., dense academic text).

**Consider hyphenation carefully**: Enable `--paragraph-hyphens: auto` only with justified text, and test across different browsers for consistent results.

**Leverage semantic integration**: Paragraph spacing and content width use semantic tokens automatically, providing responsive and dark mode behavior without explicit CSS. Override `--content-spacing` or `--content-width` when needed for special layouts.

**Modern text wrapping**: Use `--paragraph-text-wrap: pretty` in supported browsers for improved line breaking, especially in technical documentation.

**Test across contexts**: Verify paragraph customizations work well in lists, blockquotes, and other content contexts where paragraphs appear.
