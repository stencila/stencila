# Workflow for testing Rust core on multiple platforms
#
# Extends the main `test.yml` workflow by running `make -C rust lint test`
# on several platforms (whereas `test.yml` build all modules, including
# `web` and `vscode` on Ubuntu only).
#
# Intended to be run manually for specific branches, commits, or tags
# rather than on every push.

name: Test Rust
on:
  workflow_dispatch:
    inputs:
      platforms:
        description: "Platforms to test on (comma-separated: ubuntu,macos,windows)"
        type: string
        default: "ubuntu,macos,windows"

env:
  RUST_VERSION: "1.85.1"
  ORT_VERSION: "1.22.2"

jobs:
  test-rust:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu
            runner: ubuntu-latest-16core
            ort_asset: linux-x64
            ort_ext: tgz
            install_dir: /usr/local/onnxruntime
          - platform: macos
            runner: macos-15
            ort_asset: osx-x64
            ort_ext: tgz
            install_dir: /usr/local/onnxruntime
          - platform: windows
            runner: windows-latest
            ort_asset: win-x64
            ort_ext: zip
            install_dir: C:\onnxruntime

    runs-on: ${{ matrix.runner }}
    
    steps:
      - uses: actions/checkout@v4
        if: ${{ contains(inputs.platforms, matrix.platform) }}
          
      - uses: dtolnay/rust-toolchain@master
        if: ${{ contains(inputs.platforms, matrix.platform) }}
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy
          
      - uses: Swatinem/rust-cache@v2
        if: ${{ contains(inputs.platforms, matrix.platform) }}
      
      - name: Install uv
        if: ${{ contains(inputs.platforms, matrix.platform) }}
        uses: astral-sh/setup-uv@v5

      - name: Install Ninja for Kuzu (Windows)
        if: ${{ contains(inputs.platforms, 'windows') && matrix.platform == 'windows' }}
        run: choco install ninja --yes

      - name: Download ONNX Runtime SDK
        run: |
          URL="https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/onnxruntime-${{ matrix.ort_asset }}-${ORT_VERSION}.${{ matrix.ort_ext }}"
          echo "Downloading ONNX Runtime from $URL"
          if [[ "${{ matrix.ort_ext }}" == "tgz" ]]; then
            curl -sL $URL | tar zx -C "${{ matrix.install_dir }}"
          else
            curl -sL $URL -o onnxruntime.zip
            pwsh -Command "Expand-Archive onnxruntime.zip -DestinationPath '${{ matrix.install_dir }}'"
          fi

      - name: Run tests
        if: ${{ contains(inputs.platforms, matrix.platform) }}
        env:
          ORT_STRATEGY: system
          ORT_LIB_LOCATION: ${{ matrix.install_dir }}/lib
          ORT_LIB_PROFILE: Release
          ORT_PREFER_DYNAMIC_LINK: "0"
        run: make -C rust test
