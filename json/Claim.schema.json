{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/Claim.schema.json",
  "@id": "schema:Claim",
  "title": "Claim",
  "extends": [
    "CreativeWork"
  ],
  "category": "works",
  "description": "A claim represents specific reviewable facts or statements.",
  "$comment": "Usually displayed as a block element and can have a label and title.\nIn the context of a scholarly article this could be a theorem or proof.\nSee also [Schema.org `Claim`](https://schema.org/Claim) and [JATS `<statement>`](https://jats.nlm.nih.gov/publishing/tag-library/1.2/element/statement.html).\n",
  "jats": {
    "elem": "statement"
  },
  "markdown": {
    "derive": false
  },
  "proptest": {},
  "required": [
    "type",
    "claimType",
    "content"
  ],
  "core": [
    "id",
    "label"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "alternateNames": {
      "@id": "schema:alternateName",
      "description": "Alternate names (aliases) for the item.",
      "aliases": [
        "alternate-names",
        "alternate_names",
        "alternateName",
        "alternate-name",
        "alternate_name"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_csv_or_array"
      },
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "description": {
      "@id": "schema:description",
      "description": "A description of the item.",
      "strip": [
        "metadata"
      ],
      "$ref": "Text.schema.json"
    },
    "identifiers": {
      "@id": "schema:identifier",
      "description": "Any kind of identifier for any kind of Thing.",
      "$comment": "Some identifiers have specific properties e.g the `issn` property for\nthe `Periodical` type. These should be used in preference to this\nproperty which is intended for identifiers that do not yet have a\nspecific property. Identifiers can be represented as strings, but\nusing a `PropertyValue` will usually be better because it allows\nfor `propertyID` (i.e. the type of identifier).\n",
      "aliases": [
        "identifier"
      ],
      "strip": [
        "metadata"
      ],
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "PropertyValue.schema.json"
          },
          {
            "type": "string"
          }
        ]
      }
    },
    "images": {
      "@id": "schema:image",
      "description": "Images of the item.",
      "aliases": [
        "image"
      ],
      "strip": [
        "metadata"
      ],
      "type": "array",
      "items": {
        "$ref": "ImageObject.schema.json"
      }
    },
    "name": {
      "@id": "schema:name",
      "description": "The name of the item.",
      "strip": [
        "metadata"
      ],
      "type": "string"
    },
    "url": {
      "@id": "schema:url",
      "description": "The URL of the item.",
      "strip": [
        "metadata"
      ],
      "type": "string",
      "format": "uri"
    },
    "about": {
      "@id": "schema:about",
      "description": "The subject matter of the content.",
      "$comment": "Consistent with https://schema.org/about, this property allows for\nlinking to one of more `Thing` nodes. This could for example include\na `Person` (e.g for a bibliography) or a `DefinedTerm` (e.g. for\nsubject areas the creative work relates to).\n",
      "strip": [
        "metadata"
      ],
      "type": "array",
      "items": {
        "$ref": "ThingType.schema.json"
      }
    },
    "abstract": {
      "@id": "schema:abstract",
      "description": "A a short description that summarizes a `CreativeWork`.",
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    },
    "authors": {
      "@id": "schema:author",
      "description": "The authors of the `CreativeWork`.",
      "aliases": [
        "author"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Author.schema.json"
      }
    },
    "contributors": {
      "@id": "schema:contributor",
      "description": "A secondary contributor to the `CreativeWork`.",
      "aliases": [
        "contributor"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Author.schema.json"
      }
    },
    "editors": {
      "@id": "schema:editor",
      "description": "People who edited the `CreativeWork`.",
      "$comment": "Note that, consistent with schema.org, this property can only include\na `Person`, unlike `authors` and `maintainers` which can also include\n`Organization`.\n",
      "aliases": [
        "editor"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Person.schema.json"
      }
    },
    "maintainers": {
      "@id": "schema:maintainer",
      "description": "The maintainers of the `CreativeWork`.",
      "$comment": "A maintainer of a `Dataset`, `SoftwareApplication`, or other `CreativeWork`.\nA maintainer is a `Person` or `Organization` that manages contributions to,\nand/or publication of, some (typically complex) artifact. It is common for\ndistributions of software and data to be based on \"upstream\" sources.\nWhen maintainer is applied to a specific version of something e.g. a particular\nversion or packaging of a Dataset, it is always possible that the upstream\nsource has a different maintainer. The `isBasedOn` property can be used to\nindicate such relationships between datasets to make the different maintenance\nroles clear. Similarly in the case of software, a package may have dedicated\nmaintainers working on integration into software distributions such as Ubuntu,\nas well as upstream maintainers of the underlying work.\n",
      "aliases": [
        "maintainer"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "Person.schema.json"
          },
          {
            "$ref": "Organization.schema.json"
          }
        ]
      }
    },
    "comments": {
      "@id": "schema:comment",
      "description": "Comments about this creative work.",
      "aliases": [
        "comment"
      ],
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Comment.schema.json"
      }
    },
    "dateCreated": {
      "@id": "schema:dateCreated",
      "description": "Date/time of creation.",
      "aliases": [
        "date-created",
        "date_created"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "dateReceived": {
      "@id": "schema:dateReceived",
      "description": "Date/time that work was received.",
      "aliases": [
        "date-received",
        "date_received"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "dateAccepted": {
      "@id": "stencila:dateAccepted",
      "description": "Date/time of acceptance.",
      "$comment": "This is not yet a schema.org property but the term is used\n[in Dublin Core](http://purl.org/dc/terms/dateAccepted).\n",
      "aliases": [
        "date-accepted",
        "date_accepted"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "dateModified": {
      "@id": "schema:dateModified",
      "description": "Date/time of most recent modification.",
      "aliases": [
        "date-modified",
        "date_modified"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "datePublished": {
      "@id": "schema:datePublished",
      "description": "Date of first publication.",
      "aliases": [
        "date",
        "date-published",
        "date_published"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "funders": {
      "@id": "schema:funder",
      "description": "People or organizations that funded the `CreativeWork`.",
      "aliases": [
        "funder"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "Person.schema.json"
          },
          {
            "$ref": "Organization.schema.json"
          }
        ]
      }
    },
    "fundedBy": {
      "@id": "stencila:fundedBy",
      "description": "Grants that funded the `CreativeWork`; reverse of `fundedItems`.",
      "$comment": "This follows the proposal [here](https://github.com/schemaorg/schemaorg/issues/2258)\nfor a property that is the reverse of `fundedItems`.\nIt is an any because a `CreativeWork` may have been funded through more than\none `Grant`.\n",
      "aliases": [
        "funded-by",
        "funded_by"
      ],
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "Grant.schema.json"
          },
          {
            "$ref": "MonetaryGrant.schema.json"
          }
        ]
      }
    },
    "genre": {
      "@id": "schema:genre",
      "description": "Genre of the creative work, broadcast channel or group.",
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_csv_or_array"
      },
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "keywords": {
      "@id": "schema:keywords",
      "description": "Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas.",
      "aliases": [
        "keyword"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_csv_or_array"
      },
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "isPartOf": {
      "@id": "schema:isPartOf",
      "description": "An item or other CreativeWork that this CreativeWork is a part of.",
      "aliases": [
        "is-part-of",
        "is_part_of"
      ],
      "strip": [
        "metadata"
      ],
      "$ref": "CreativeWorkType.schema.json"
    },
    "licenses": {
      "@id": "schema:license",
      "description": "License documents that applies to this content, typically indicated by URL.",
      "aliases": [
        "license"
      ],
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "CreativeWorkType.schema.json"
          },
          {
            "$ref": "Text.schema.json"
          }
        ]
      }
    },
    "parts": {
      "@id": "schema:hasParts",
      "description": "Elements of the collection which can be a variety of different elements, such as Articles, Datatables, Tables and more.",
      "aliases": [
        "hasParts",
        "part"
      ],
      "strip": [
        "content"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "CreativeWorkType.schema.json"
      }
    },
    "publisher": {
      "@id": "schema:publisher",
      "description": "A publisher of the CreativeWork.",
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "anyOf": [
        {
          "$ref": "Person.schema.json"
        },
        {
          "$ref": "Organization.schema.json"
        }
      ]
    },
    "references": {
      "@id": "schema:citation",
      "description": "References to other creative works, such as another publication, web page, scholarly article, etc.",
      "aliases": [
        "citations",
        "reference"
      ],
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "CreativeWorkType.schema.json"
          },
          {
            "$ref": "Text.schema.json"
          }
        ]
      }
    },
    "text": {
      "@id": "schema:text",
      "description": "The textual content of this creative work.",
      "strip": [
        "content"
      ],
      "$ref": "Text.schema.json"
    },
    "title": {
      "@id": "schema:headline",
      "description": "The title of the creative work.",
      "aliases": [
        "headline"
      ],
      "strip": [
        "metadata"
      ],
      "patch": {
        "formats": [
          "md"
        ]
      },
      "dom": {
        "elem": "h1"
      },
      "type": "array",
      "items": {
        "$ref": "Inline.schema.json"
      }
    },
    "version": {
      "@id": "schema:version",
      "description": "The version of the creative work.",
      "$comment": "In this case `string` is listed as an alternative before `number` to\navoid semantic version numbers e.g. `1.0` being parsed, and subsequently\nencoded, as `1` thereby resulting in loss of information.\n",
      "strip": [
        "metadata"
      ],
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "claimType": {
      "@id": "stencila:claimType",
      "description": "The type of the claim.",
      "aliases": [
        "claim-type",
        "claim_type"
      ],
      "patch": {
        "formats": [
          "md"
        ]
      },
      "jats": {
        "attr": "content-type"
      },
      "$ref": "ClaimType.schema.json"
    },
    "label": {
      "@id": "stencila:label",
      "description": "A short label for the claim.",
      "patch": {
        "formats": [
          "md"
        ]
      },
      "jats": {
        "elem": "label"
      },
      "type": "string"
    },
    "content": {
      "@id": "stencila:content",
      "description": "Content of the claim, usually a single paragraph.",
      "$comment": "Most claims will have a single paragraph but could have multiple\nparagraphs, tables and even figures.\n",
      "dom": {
        "elem": "aside"
      },
      "proptest": {
        "min": {
          "description": "Generate a single arbitrary paragraph.",
          "strategy": "vec_paragraphs(1)"
        },
        "low": {
          "description": "Generate up to two arbitrary, non-recursive, block nodes.",
          "strategy": "vec_blocks_non_recursive(2)"
        },
        "max": {
          "description": "Generate up to four arbitrary, non-recursive, block nodes.",
          "strategy": "vec_blocks_non_recursive(4)"
        }
      },
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    }
  }
}