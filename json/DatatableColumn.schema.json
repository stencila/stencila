{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/DatatableColumn.schema.json",
  "@id": "stencila:DatatableColumn",
  "title": "DatatableColumn",
  "nick": "dtc",
  "extends": [
    "Entity"
  ],
  "category": "data",
  "description": "A column of data within a `Datatable`.",
  "required": [
    "type",
    "name",
    "values"
  ],
  "core": [
    "id",
    "validator"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "name": {
      "@id": "stencila:name",
      "description": "The name of the column.",
      "type": "string"
    },
    "values": {
      "@id": "stencila:values",
      "description": "The data values of the column.",
      "$comment": "Previously, any `Node` type was allowed in values. However, for some implementations\nthis was inefficient (e.g. in Rust a `enum Node` is >500 bytes whereas a `enum Primitive` is 32 bytes).\n",
      "aliases": [
        "value"
      ],
      "serde": {
        "deserializeWith": "none"
      },
      "type": "array",
      "items": {
        "$ref": "Primitive.schema.json"
      }
    },
    "validator": {
      "@id": "stencila:validator",
      "description": "The validator to use to validate data in the column.",
      "$ref": "ArrayValidator.schema.json"
    }
  }
}