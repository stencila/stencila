{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/TableCell.schema.json",
  "@id": "stencila:TableCell",
  "title": "TableCell",
  "nick": "tbc",
  "extends": [
    "Entity"
  ],
  "category": "works",
  "description": "A cell within a `Table`.",
  "dom": {
    "derive": false
  },
  "html": {
    "elem": "td"
  },
  "jats": {
    "special": true
  },
  "proptest": {},
  "required": [
    "type",
    "content"
  ],
  "core": [
    "id",
    "cellType",
    "horizontalAlignment",
    "horizontalAlignmentCharacter",
    "verticalAlignment"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "cellType": {
      "@id": "stencila:cellType",
      "description": "The type of cell.",
      "aliases": [
        "cell-type",
        "cell_type"
      ],
      "$ref": "TableCellType.schema.json"
    },
    "name": {
      "@id": "schema:name",
      "description": "The name of the cell.",
      "$comment": "Cell's have an implicit name derived from their position in the table\ne.g. `C4` for the cell in the third column and fourth row. However this name can be overridden\nwith an explicit name, e.g. `rate`.\n",
      "type": "string"
    },
    "columnSpan": {
      "@id": "stencila:colspan",
      "description": "How many columns the cell extends.",
      "$comment": "Based on the HTML `colspan` attribute for [table cells](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td).",
      "aliases": [
        "column-span",
        "column_span"
      ],
      "html": {
        "attr": "colspan"
      },
      "type": "integer",
      "minimum": 0.0,
      "maximum": 1000.0
    },
    "rowSpan": {
      "@id": "stencila:rowspan",
      "description": "How many columns the cell extends.",
      "$comment": "Based on the HTML `rowspan` attribute for [table cells](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td).",
      "aliases": [
        "row-span",
        "row_span"
      ],
      "html": {
        "attr": "rowspan"
      },
      "type": "integer",
      "minimum": 0.0,
      "maximum": 65534.0
    },
    "horizontalAlignment": {
      "@id": "stencila:horizontalAlignment",
      "description": "The horizontal alignment of the content of a table cell.",
      "$comment": "Based on the JATS [`align`](https://jats.nlm.nih.gov/archiving/tag-library/1.2/attribute/align.html) attribute.",
      "aliases": [
        "horizontal-alignment",
        "horizontal_alignment"
      ],
      "$ref": "HorizontalAlignment.schema.json"
    },
    "horizontalAlignmentCharacter": {
      "@id": "stencila:horizontalAlignmentCharacter",
      "description": "The character to be used in horizontal alignment of the content of a table cell.",
      "$comment": "Based on the JATS [`char`](https://jats.nlm.nih.gov/archiving/tag-library/1.2/attribute/char.html) attribute.",
      "aliases": [
        "horizontal-alignment-character",
        "horizontal_alignment_character"
      ],
      "type": "string"
    },
    "verticalAlignment": {
      "@id": "stencila:verticalAlignment",
      "description": "The vertical alignment of the content of a table cell.",
      "$comment": "Based on the JATS [`valign`](https://jats.nlm.nih.gov/archiving/tag-library/1.2/attribute/valign.html) attribute.",
      "aliases": [
        "vertical-alignment",
        "vertical_alignment"
      ],
      "$ref": "VerticalAlignment.schema.json"
    },
    "content": {
      "@id": "stencila:content",
      "description": "Contents of the table cell.",
      "dom": {
        "elem": "td"
      },
      "proptest": {
        "min": {
          "description": "Generate a single, arbitrary, paragraph",
          "strategy": "table_cell_content(1)"
        }
      },
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    }
  }
}