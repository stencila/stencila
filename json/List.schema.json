{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/List.schema.json",
  "@id": "schema:ItemList",
  "title": "List",
  "nick": "lst",
  "extends": [
    "Entity"
  ],
  "category": "prose",
  "description": "A list of items.",
  "$comment": "This is an implementation, and renaming, of schema.org [`ItemList`](https://schema.org/ItemList).\nRenaming was done as `List` was considered a more developer friendly alternative. Similarly,\nschema.org properties `itemListElement` and `itemListOrder` were renamed to `items` and `order`.\nNote that, as with every other such renaming in Stencila Schema, a mapping between names is\ndefined and it is trivial to save Stencila Schema documents using the schema.org vocabulary if so desired.\n",
  "dom": {
    "derive": false
  },
  "html": {
    "special": true
  },
  "jats": {
    "elem": "list"
  },
  "markdown": {
    "derive": false
  },
  "proptest": {},
  "required": [
    "type",
    "items",
    "order"
  ],
  "core": [
    "id"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "items": {
      "@id": "schema:itemListElement",
      "description": "The items in the list.",
      "aliases": [
        "item"
      ],
      "patch": {
        "formats": [
          "md"
        ]
      },
      "walk": true,
      "jats": {
        "content": true
      },
      "proptest": {
        "min": {
          "description": "Generate a single, arbitrary, list item.",
          "strategy": "vec(ListItem::arbitrary(), size_range(1..=1))"
        },
        "low": {
          "description": "Generate up to two, arbitrary, list items.",
          "strategy": "vec(ListItem::arbitrary(), size_range(1..=2))"
        },
        "high": {
          "description": "Generate up to four, arbitrary, list items.",
          "strategy": "vec(ListItem::arbitrary(), size_range(1..=4))"
        },
        "max": {
          "description": "Generate up to eight, arbitrary, list items.",
          "strategy": "vec(ListItem::arbitrary(), size_range(1..=8))"
        }
      },
      "type": "array",
      "items": {
        "$ref": "ListItem.schema.json"
      }
    },
    "order": {
      "@id": "schema:itemListOrder",
      "description": "The ordering of the list.",
      "patch": {
        "formats": [
          "md"
        ]
      },
      "jats": {
        "attr": "list-type"
      },
      "proptest": {
        "min": {
          "description": "Always generate an unordered list.",
          "value": "ListOrder::Unordered"
        },
        "low": {
          "description": "Randomly generate either and unordered or ascending list.",
          "strategy": "prop_oneof![Just(ListOrder::Unordered),Just(ListOrder::Ascending)]"
        },
        "high": {
          "description": "Generate an arbitrary list ordering.",
          "strategy": "ListOrder::arbitrary()"
        }
      },
      "$ref": "ListOrder.schema.json"
    },
    "authors": {
      "@id": "schema:author",
      "description": "The authors of the list.",
      "aliases": [
        "author"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "type": "array",
      "items": {
        "$ref": "Author.schema.json"
      }
    }
  }
}