{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/CodeChunk.schema.json",
  "@id": "stencila:CodeChunk",
  "title": "CodeChunk",
  "nick": "cdc",
  "extends": [
    "CodeExecutable"
  ],
  "category": "code",
  "description": "A executable chunk of code.",
  "proptest": {},
  "jats": {
    "elem": "code",
    "attrs": {
      "executable": "yes"
    }
  },
  "markdown": {
    "derive": false
  },
  "required": [
    "type",
    "code"
  ],
  "core": [
    "id",
    "autoExec",
    "programmingLanguage",
    "labelType",
    "label",
    "caption",
    "outputs"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "autoExec": {
      "@id": "stencila:autoExec",
      "description": "Under which circumstances the code should be automatically executed.",
      "aliases": [
        "auto",
        "auto-exec",
        "auto_exec"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "AutomaticExecution.schema.json"
    },
    "compilationDigest": {
      "@id": "stencila:compilationDigest",
      "description": "A digest of the content, semantics and dependencies of the node.",
      "aliases": [
        "compilation-digest",
        "compilation_digest"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "skip": true
      },
      "$ref": "CompilationDigest.schema.json"
    },
    "compilationMessages": {
      "@id": "stencila:compilationMessages",
      "description": "Messages generated while compiling the code.",
      "aliases": [
        "compilation-messages",
        "compilation_messages",
        "compilationMessage",
        "compilation-message",
        "compilation_message"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "div"
      },
      "type": "array",
      "items": {
        "$ref": "CompilationMessage.schema.json"
      }
    },
    "executionDigest": {
      "@id": "stencila:executionDigest",
      "description": "The `compilationDigest` of the node when it was last executed.",
      "aliases": [
        "execution-digest",
        "execution_digest"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "skip": true
      },
      "$ref": "CompilationDigest.schema.json"
    },
    "executionDependencies": {
      "@id": "stencila:executionDependencies",
      "description": "The upstream dependencies of this node.",
      "aliases": [
        "execution-dependencies",
        "execution_dependencies",
        "executionDependency",
        "execution-dependency",
        "execution_dependency"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "div"
      },
      "type": "array",
      "items": {
        "$ref": "ExecutionDependency.schema.json"
      }
    },
    "executionDependants": {
      "@id": "stencila:executionDependants",
      "description": "The downstream dependants of this node.",
      "aliases": [
        "execution-dependants",
        "execution_dependants",
        "executionDependant",
        "execution-dependant",
        "execution_dependant"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "div"
      },
      "type": "array",
      "items": {
        "$ref": "ExecutionDependant.schema.json"
      }
    },
    "executionTags": {
      "@id": "stencila:executionTags",
      "description": "Tags in the code which affect its execution.",
      "aliases": [
        "execution-tags",
        "execution_tags",
        "executionTag",
        "execution-tag",
        "execution_tag"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "div"
      },
      "type": "array",
      "items": {
        "$ref": "ExecutionTag.schema.json"
      }
    },
    "executionCount": {
      "@id": "stencila:executionCount",
      "description": "A count of the number of times that the node has been executed.",
      "$comment": "Intended to increment with each successive execution of the node, including across sessions.\nNote that this differs to the `execution_count` in Jupyter Notebook format which is\nthe \"code cell's prompt number\" and which resets at the start of each new session.\n",
      "aliases": [
        "execution-count",
        "execution_count"
      ],
      "strip": [
        "execution"
      ],
      "type": "integer",
      "minimum": 0.0
    },
    "executionRequired": {
      "@id": "stencila:executionRequired",
      "description": "Whether, and why, the code requires execution or re-execution.",
      "aliases": [
        "execution-required",
        "execution_required"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionRequired.schema.json"
    },
    "executionStatus": {
      "@id": "stencila:executionStatus",
      "description": "Status of the most recent, including any current, execution.",
      "aliases": [
        "execution-status",
        "execution_status"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionStatus.schema.json"
    },
    "executionActor": {
      "@id": "stencila:executionActor",
      "description": "The id of the actor that the node was last executed by.",
      "aliases": [
        "execution-actor",
        "execution_actor"
      ],
      "strip": [
        "execution"
      ],
      "type": "string"
    },
    "executionEnded": {
      "@id": "stencila:executionEnded",
      "description": "The timestamp when the last execution ended.",
      "aliases": [
        "execution-ended",
        "execution_ended"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "with": "Timestamp::to_dom_attr"
      },
      "$ref": "Timestamp.schema.json"
    },
    "executionDuration": {
      "@id": "stencila:executionDuration",
      "description": "Duration of the last execution.",
      "aliases": [
        "execution-duration",
        "execution_duration"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "with": "Duration::to_dom_attr"
      },
      "$ref": "Duration.schema.json"
    },
    "executionMessages": {
      "@id": "stencila:executionMessages",
      "description": "Messages emitted while executing the node.",
      "aliases": [
        "execution-messages",
        "execution_messages",
        "executionMessage",
        "execution-message",
        "execution_message"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "div"
      },
      "type": "array",
      "items": {
        "$ref": "ExecutionMessage.schema.json"
      }
    },
    "code": {
      "@id": "stencila:code",
      "description": "The code.",
      "strip": [
        "code"
      ],
      "proptest": {
        "min": {
          "description": "Generate a simple fixed string of code.",
          "value": "Cord::new(\"code\")"
        },
        "low": {
          "description": "Generate a random string of up to 10 alphanumeric characters (excludes whitespace which\ncan be problematic in Markdown).\n",
          "strategy": "r\"[a-zA-Z0-9]{1,10}\".prop_map(Cord::new)"
        },
        "high": {
          "description": "Generate a random string of up to 100 characters (excluding control characters).\n",
          "strategy": "r\"[^\\p{C}]{1,100}\".prop_map(Cord::new)"
        },
        "max": {
          "description": "Generate an arbitrary string.",
          "strategy": "String::arbitrary().prop_map(Cord::new)"
        }
      },
      "dom": {
        "elem": "pre"
      },
      "jats": {
        "content": true
      },
      "$ref": "Cord.schema.json"
    },
    "programmingLanguage": {
      "@id": "schema:programmingLanguage",
      "description": "The programming language of the code.",
      "aliases": [
        "programming-language",
        "programming_language"
      ],
      "strip": [
        "code"
      ],
      "proptest": {
        "min": {
          "description": "Generate a simple fixed string.",
          "value": "Some(String::from(\"lang\"))"
        },
        "low": {
          "description": "Generate one of the well known programming language short names.",
          "strategy": "option::of(r\"(cpp)|(js)|(py)|(r)|(ts)\")"
        },
        "high": {
          "description": "Generate a random string of up to 10 alphanumeric characters.",
          "strategy": "option::of(r\"[a-zA-Z0-9]{1,10}\")"
        },
        "max": {
          "description": "Generate an arbitrary string.",
          "strategy": "option::of(String::arbitrary())"
        }
      },
      "jats": {
        "attr": "language"
      },
      "type": "string"
    },
    "authors": {
      "@id": "schema:author",
      "description": "The authors of the executable code.",
      "aliases": [
        "author"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "span"
      },
      "type": "array",
      "items": {
        "$ref": "Author.schema.json"
      }
    },
    "labelType": {
      "@id": "stencila:labelType",
      "description": "The type of the label for the chunk.",
      "$comment": "Used during automatic sequential numbering of figures and tables within the document.\nWithout this property it is not possible to know if the chunk should be in the\nseries of figures, or in the series of tables.\n",
      "aliases": [
        "label-type",
        "label_type"
      ],
      "proptest": {
        "min": {
          "description": "No label type",
          "value": "None"
        },
        "low": {
          "description": "Generate an arbitrary label type",
          "strategy": "option::of(LabelType::arbitrary())"
        }
      },
      "$ref": "LabelType.schema.json"
    },
    "label": {
      "@id": "stencila:label",
      "description": "A short label for the chunk.",
      "proptest": {
        "min": {
          "description": "No label",
          "value": "None"
        },
        "low": {
          "description": "Generate a simple label",
          "strategy": "option::of(r\"[a-zA-Z0-9]+\")"
        },
        "max": {
          "description": "Generate an arbitrary string",
          "strategy": "option::of(String::arbitrary())"
        }
      },
      "type": "string"
    },
    "caption": {
      "@id": "schema:caption",
      "description": "A caption for the chunk.",
      "walk": true,
      "proptest": {
        "min": {
          "description": "No caption",
          "value": "None"
        },
        "low": {
          "description": "Generate up to two arbitrary paragraphs.",
          "strategy": "option::of(vec_paragraphs(2))"
        }
      },
      "dom": {
        "elem": "div"
      },
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    },
    "outputs": {
      "@id": "stencila:outputs",
      "description": "Outputs from executing the chunk.",
      "aliases": [
        "output"
      ],
      "strip": [
        "output"
      ],
      "serde": {
        "deserializeWith": "none"
      },
      "dom": {
        "elem": "div"
      },
      "type": "array",
      "items": {
        "$ref": "Node.schema.json"
      }
    },
    "executionPure": {
      "@id": "stencila:executionPure",
      "description": "Whether the code should be treated as side-effect free when executed.",
      "aliases": [
        "execution-pure",
        "execution_pure"
      ],
      "strip": [
        "execution"
      ],
      "type": "boolean"
    }
  }
}