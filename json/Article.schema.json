{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/Article.schema.json",
  "@id": "schema:Article",
  "title": "Article",
  "extends": [
    "CreativeWork",
    "Executable"
  ],
  "category": "works",
  "description": "An article, including news and scholarly articles.",
  "$comment": "This is an implementation, and extension, of schema.org [`Article`](https://schema.org/Article).\nIt extends schema.org `Article` by adding a `content` property which must be\nan array of [`Block`](./Block), as well as the properties added by\n[`CreativeWork`](./CreativeWork) which it extends.\n",
  "html": {
    "elem": "article"
  },
  "jats": {
    "elem": "article",
    "special": true
  },
  "markdown": {
    "derive": false
  },
  "proptest": {},
  "required": [
    "type",
    "type",
    "content"
  ],
  "core": [
    "id",
    "id",
    "executionMode",
    "executionBounds",
    "title",
    "authors",
    "provenance",
    "genre",
    "keywords",
    "abstract",
    "dateCreated",
    "dateModified",
    "dateReceived",
    "dateAccepted",
    "datePublished",
    "description",
    "references",
    "config",
    "headings",
    "temporary",
    "archive"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "alternateNames": {
      "@id": "schema:alternateName",
      "description": "Alternate names (aliases) for the item.",
      "aliases": [
        "alternate-names",
        "alternate_names",
        "alternateName",
        "alternate-name",
        "alternate_name"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_csv_or_array"
      },
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "description": {
      "@id": "schema:description",
      "description": "A description of the item.",
      "strip": [
        "metadata"
      ],
      "patch": {
        "formats": [
          "md",
          "smd",
          "myst",
          "ipynb",
          "qmd"
        ]
      },
      "type": "string"
    },
    "identifiers": {
      "@id": "schema:identifier",
      "description": "Any kind of identifier for any kind of Thing.",
      "$comment": "Some identifiers have specific properties e.g the `issn` property for\nthe `Periodical` type. These should be used in preference to this\nproperty which is intended for identifiers that do not yet have a\nspecific property. Identifiers can be represented as strings, but\nusing a `PropertyValue` will usually be better because it allows\nfor `propertyID` (i.e. the type of identifier).\n",
      "aliases": [
        "identifier"
      ],
      "strip": [
        "metadata"
      ],
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "PropertyValue.schema.json"
          },
          {
            "type": "string"
          }
        ]
      }
    },
    "images": {
      "@id": "schema:image",
      "description": "Images of the item.",
      "aliases": [
        "image"
      ],
      "strip": [
        "metadata"
      ],
      "type": "array",
      "items": {
        "$ref": "ImageObject.schema.json"
      }
    },
    "name": {
      "@id": "schema:name",
      "description": "The name of the item.",
      "strip": [
        "metadata"
      ],
      "type": "string"
    },
    "url": {
      "@id": "schema:url",
      "description": "The URL of the item.",
      "strip": [
        "metadata"
      ],
      "type": "string",
      "format": "uri"
    },
    "about": {
      "@id": "schema:about",
      "description": "The subject matter of the content.",
      "$comment": "Consistent with https://schema.org/about, this property allows for\nlinking to one of more `Thing` nodes. This could for example include\na `Person` (e.g for a bibliography) or a `DefinedTerm` (e.g. for\nsubject areas the creative work relates to).\n",
      "strip": [
        "metadata"
      ],
      "type": "array",
      "items": {
        "$ref": "ThingType.schema.json"
      }
    },
    "abstract": {
      "@id": "schema:abstract",
      "description": "A a short description that summarizes a `CreativeWork`.",
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    },
    "authors": {
      "@id": "schema:author",
      "description": "The authors of the `CreativeWork`.",
      "aliases": [
        "author"
      ],
      "strip": [
        "authors"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Author.schema.json"
      }
    },
    "provenance": {
      "@id": "stencila:provenance",
      "description": "A summary of the provenance of the content within the work.",
      "strip": [
        "provenance"
      ],
      "dom": {
        "elem": "div"
      },
      "type": "array",
      "items": {
        "$ref": "ProvenanceCount.schema.json"
      }
    },
    "contributors": {
      "@id": "schema:contributor",
      "description": "A secondary contributor to the `CreativeWork`.",
      "aliases": [
        "contributor"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Author.schema.json"
      }
    },
    "editors": {
      "@id": "schema:editor",
      "description": "People who edited the `CreativeWork`.",
      "$comment": "Note that, consistent with schema.org, this property can only include\na `Person`, unlike `authors` and `maintainers` which can also include\n`Organization`.\n",
      "aliases": [
        "editor"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Person.schema.json"
      }
    },
    "maintainers": {
      "@id": "schema:maintainer",
      "description": "The maintainers of the `CreativeWork`.",
      "$comment": "A maintainer of a `Dataset`, `SoftwareApplication`, or other `CreativeWork`.\nA maintainer is a `Person` or `Organization` that manages contributions to,\nand/or publication of, some (typically complex) artifact. It is common for\ndistributions of software and data to be based on \"upstream\" sources.\nWhen maintainer is applied to a specific version of something e.g. a particular\nversion or packaging of a Dataset, it is always possible that the upstream\nsource has a different maintainer. The `isBasedOn` property can be used to\nindicate such relationships between datasets to make the different maintenance\nroles clear. Similarly in the case of software, a package may have dedicated\nmaintainers working on integration into software distributions such as Ubuntu,\nas well as upstream maintainers of the underlying work.\n",
      "aliases": [
        "maintainer"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "Person.schema.json"
          },
          {
            "$ref": "Organization.schema.json"
          }
        ]
      }
    },
    "comments": {
      "@id": "schema:comment",
      "description": "Comments about this creative work.",
      "aliases": [
        "comment"
      ],
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "Comment.schema.json"
      }
    },
    "dateCreated": {
      "@id": "schema:dateCreated",
      "description": "Date/time of creation.",
      "aliases": [
        "date-created",
        "date_created"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "dateReceived": {
      "@id": "schema:dateReceived",
      "description": "Date/time that work was received.",
      "aliases": [
        "date-received",
        "date_received"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "dateAccepted": {
      "@id": "stencila:dateAccepted",
      "description": "Date/time of acceptance.",
      "$comment": "This is not yet a schema.org property but the term is used\n[in Dublin Core](http://purl.org/dc/terms/dateAccepted).\n",
      "aliases": [
        "date-accepted",
        "date_accepted"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "dateModified": {
      "@id": "schema:dateModified",
      "description": "Date/time of most recent modification.",
      "aliases": [
        "date-modified",
        "date_modified"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "datePublished": {
      "@id": "schema:datePublished",
      "description": "Date of first publication.",
      "aliases": [
        "date",
        "date-published",
        "date_published"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_string_or_object"
      },
      "$ref": "Date.schema.json"
    },
    "funders": {
      "@id": "schema:funder",
      "description": "People or organizations that funded the `CreativeWork`.",
      "aliases": [
        "funder"
      ],
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_one_or_many_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "Person.schema.json"
          },
          {
            "$ref": "Organization.schema.json"
          }
        ]
      }
    },
    "fundedBy": {
      "@id": "stencila:fundedBy",
      "description": "Grants that funded the `CreativeWork`; reverse of `fundedItems`.",
      "$comment": "This follows the proposal [here](https://github.com/schemaorg/schemaorg/issues/2258)\nfor a property that is the reverse of `fundedItems`.\nIt is an any because a `CreativeWork` may have been funded through more than\none `Grant`.\n",
      "aliases": [
        "funded-by",
        "funded_by"
      ],
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "Grant.schema.json"
          },
          {
            "$ref": "MonetaryGrant.schema.json"
          }
        ]
      }
    },
    "genre": {
      "@id": "schema:genre",
      "description": "Genre of the creative work, broadcast channel or group.",
      "strip": [
        "metadata"
      ],
      "patch": {
        "formats": [
          "md",
          "smd",
          "myst",
          "ipynb",
          "qmd"
        ]
      },
      "serde": {
        "default": false,
        "deserializeWith": "option_csv_or_array"
      },
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "keywords": {
      "@id": "schema:keywords",
      "description": "Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas.",
      "aliases": [
        "keyword"
      ],
      "strip": [
        "metadata"
      ],
      "patch": {
        "formats": [
          "md",
          "smd",
          "myst",
          "ipynb",
          "qmd"
        ]
      },
      "serde": {
        "default": false,
        "deserializeWith": "option_csv_or_array"
      },
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "isPartOf": {
      "@id": "schema:isPartOf",
      "description": "An item or other CreativeWork that this CreativeWork is a part of.",
      "aliases": [
        "is-part-of",
        "is_part_of"
      ],
      "strip": [
        "metadata"
      ],
      "$ref": "CreativeWorkType.schema.json"
    },
    "licenses": {
      "@id": "schema:license",
      "description": "License documents that applies to this content, typically indicated by URL.",
      "aliases": [
        "license"
      ],
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "CreativeWorkType.schema.json"
          },
          {
            "$ref": "Text.schema.json"
          }
        ]
      }
    },
    "parts": {
      "@id": "schema:hasParts",
      "description": "Elements of the collection which can be a variety of different elements, such as Articles, Datatables, Tables and more.",
      "aliases": [
        "hasParts",
        "part"
      ],
      "strip": [
        "content"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "$ref": "CreativeWorkType.schema.json"
      }
    },
    "publisher": {
      "@id": "schema:publisher",
      "description": "A publisher of the CreativeWork.",
      "strip": [
        "metadata"
      ],
      "serde": {
        "default": false,
        "deserializeWith": "option_string_or_object"
      },
      "dom": {
        "elem": "section"
      },
      "anyOf": [
        {
          "$ref": "Person.schema.json"
        },
        {
          "$ref": "Organization.schema.json"
        }
      ]
    },
    "references": {
      "@id": "schema:citation",
      "description": "References to other creative works, such as another publication, web page, scholarly article, etc.",
      "aliases": [
        "citations",
        "reference"
      ],
      "strip": [
        "metadata"
      ],
      "dom": {
        "elem": "section"
      },
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "CreativeWorkType.schema.json"
          },
          {
            "$ref": "Text.schema.json"
          }
        ]
      }
    },
    "text": {
      "@id": "schema:text",
      "description": "The textual content of this creative work.",
      "strip": [
        "content"
      ],
      "$ref": "Text.schema.json"
    },
    "title": {
      "@id": "schema:headline",
      "description": "The title of the creative work.",
      "aliases": [
        "headline"
      ],
      "strip": [
        "metadata"
      ],
      "patch": {
        "formats": [
          "md",
          "smd",
          "myst",
          "ipynb",
          "qmd"
        ]
      },
      "dom": {
        "elem": "h1"
      },
      "type": "array",
      "items": {
        "$ref": "Inline.schema.json"
      }
    },
    "version": {
      "@id": "schema:version",
      "description": "The version of the creative work.",
      "$comment": "In this case `string` is listed as an alternative before `number` to\navoid semantic version numbers e.g. `1.0` being parsed, and subsequently\nencoded, as `1` thereby resulting in loss of information.\n",
      "strip": [
        "metadata"
      ],
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "executionMode": {
      "@id": "stencila:executionMode",
      "description": "Under which circumstances the node should be executed.",
      "aliases": [
        "execution-mode",
        "execution_mode"
      ],
      "strip": [
        "execution"
      ],
      "patch": {
        "formats": [
          "md",
          "smd",
          "myst",
          "ipynb",
          "qmd"
        ]
      },
      "$ref": "ExecutionMode.schema.json"
    },
    "executionBounds": {
      "@id": "stencila:executionBounds",
      "description": "Under which circumstances child nodes should be executed.",
      "aliases": [
        "execution-bounds",
        "execution_bounds"
      ],
      "strip": [
        "execution"
      ],
      "patch": {
        "formats": [
          "md",
          "smd",
          "myst",
          "ipynb",
          "qmd"
        ]
      },
      "$ref": "ExecutionBounds.schema.json"
    },
    "compilationDigest": {
      "@id": "stencila:compilationDigest",
      "description": "A digest of the content, semantics and dependencies of the node.",
      "aliases": [
        "compilation-digest",
        "compilation_digest"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "skip": true
      },
      "$ref": "CompilationDigest.schema.json"
    },
    "compilationMessages": {
      "@id": "stencila:compilationMessages",
      "description": "Messages generated while compiling the code.",
      "aliases": [
        "compilation-messages",
        "compilation_messages",
        "compilationMessage",
        "compilation-message",
        "compilation_message"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "span"
      },
      "type": "array",
      "items": {
        "$ref": "CompilationMessage.schema.json"
      }
    },
    "executionDigest": {
      "@id": "stencila:executionDigest",
      "description": "The `compilationDigest` of the node when it was last executed.",
      "aliases": [
        "execution-digest",
        "execution_digest"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "skip": true
      },
      "$ref": "CompilationDigest.schema.json"
    },
    "executionDependencies": {
      "@id": "stencila:executionDependencies",
      "description": "The upstream dependencies of this node.",
      "aliases": [
        "execution-dependencies",
        "execution_dependencies",
        "executionDependency",
        "execution-dependency",
        "execution_dependency"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "span"
      },
      "type": "array",
      "items": {
        "$ref": "ExecutionDependency.schema.json"
      }
    },
    "executionDependants": {
      "@id": "stencila:executionDependants",
      "description": "The downstream dependants of this node.",
      "aliases": [
        "execution-dependants",
        "execution_dependants",
        "executionDependant",
        "execution-dependant",
        "execution_dependant"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "span"
      },
      "type": "array",
      "items": {
        "$ref": "ExecutionDependant.schema.json"
      }
    },
    "executionTags": {
      "@id": "stencila:executionTags",
      "description": "Tags in the code which affect its execution.",
      "aliases": [
        "execution-tags",
        "execution_tags",
        "executionTag",
        "execution-tag",
        "execution_tag"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "span"
      },
      "type": "array",
      "items": {
        "$ref": "ExecutionTag.schema.json"
      }
    },
    "executionCount": {
      "@id": "stencila:executionCount",
      "description": "A count of the number of times that the node has been executed.",
      "$comment": "Intended to increment with each successive execution of the node, including across sessions.\nNote that this differs to the `execution_count` in Jupyter Notebook format which is\nthe \"code cell's prompt number\" and which resets at the start of each new session.\n",
      "aliases": [
        "execution-count",
        "execution_count"
      ],
      "strip": [
        "execution"
      ],
      "type": "integer",
      "minimum": 0.0
    },
    "executionRequired": {
      "@id": "stencila:executionRequired",
      "description": "Whether, and why, the code requires execution or re-execution.",
      "aliases": [
        "execution-required",
        "execution_required"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionRequired.schema.json"
    },
    "executionStatus": {
      "@id": "stencila:executionStatus",
      "description": "Status of the most recent, including any current, execution.",
      "aliases": [
        "execution-status",
        "execution_status"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionStatus.schema.json"
    },
    "executionInstance": {
      "@id": "stencila:executionInstance",
      "description": "The id of the kernel instance that performed the last execution.",
      "$comment": "Used to help identify whether execution is required due to the last execution\nbeing in a difference instance (e.g. after a kernel restart).\n",
      "aliases": [
        "execution-instance",
        "execution_instance"
      ],
      "strip": [
        "execution"
      ],
      "type": "string"
    },
    "executionBounded": {
      "@id": "stencila:executionBounded",
      "description": "The bounds, if any, on the last execution.",
      "aliases": [
        "execution-bounded",
        "execution_bounded"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionBounds.schema.json"
    },
    "executionEnded": {
      "@id": "stencila:executionEnded",
      "description": "The timestamp when the last execution ended.",
      "aliases": [
        "execution-ended",
        "execution_ended"
      ],
      "strip": [
        "execution",
        "timestamps"
      ],
      "dom": {
        "with": "Timestamp::to_dom_attr"
      },
      "$ref": "Timestamp.schema.json"
    },
    "executionDuration": {
      "@id": "stencila:executionDuration",
      "description": "Duration of the last execution.",
      "aliases": [
        "execution-duration",
        "execution_duration"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "with": "Duration::to_dom_attr"
      },
      "$ref": "Duration.schema.json"
    },
    "executionMessages": {
      "@id": "stencila:executionMessages",
      "description": "Messages emitted while executing the node.",
      "aliases": [
        "execution-messages",
        "execution_messages",
        "executionMessage",
        "execution-message",
        "execution_message"
      ],
      "strip": [
        "execution"
      ],
      "dom": {
        "elem": "span"
      },
      "type": "array",
      "items": {
        "$ref": "ExecutionMessage.schema.json"
      }
    },
    "pageStart": {
      "@id": "schema:pageStart",
      "description": "The page on which the article starts; for example \"135\" or \"xiii\".",
      "aliases": [
        "page-start",
        "page_start"
      ],
      "strip": [
        "metadata"
      ],
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "string"
        }
      ]
    },
    "pageEnd": {
      "@id": "schema:pageEnd",
      "description": "The page on which the article ends; for example \"138\" or \"xvi\".",
      "aliases": [
        "page-end",
        "page_end"
      ],
      "strip": [
        "metadata"
      ],
      "anyOf": [
        {
          "type": "integer"
        },
        {
          "type": "string"
        }
      ]
    },
    "pagination": {
      "@id": "schema:pagination",
      "description": "Any description of pages that is not separated into pageStart and pageEnd; for example, \"1-6, 9, 55\".",
      "strip": [
        "metadata"
      ],
      "type": "string"
    },
    "config": {
      "@id": "stencila:config",
      "description": "Configuration options for the document.",
      "strip": [
        "metadata"
      ],
      "patch": {
        "formats": [
          "md",
          "smd",
          "myst",
          "ipynb",
          "qmd"
        ]
      },
      "dom": {
        "elem": "div"
      },
      "$ref": "Config.schema.json"
    },
    "headings": {
      "@id": "stencila:headings",
      "description": "A list of links to headings, including implied section headings, within the document",
      "$comment": "This list is automatically populated when the document is compiled.\nEach item in the list has (1) a `Link` to the heading, and (2) a nested list of subheadings.\n",
      "strip": [
        "content",
        "temporary"
      ],
      "dom": {
        "elem": "nav"
      },
      "$ref": "List.schema.json"
    },
    "content": {
      "@id": "stencila:content",
      "description": "The content of the article.",
      "strip": [
        "content"
      ],
      "dom": {
        "elem": "section"
      },
      "proptest": {
        "min": {
          "description": "Generate a single arbitrary block node",
          "strategy": "vec_blocks(1)"
        },
        "low": {
          "description": "Generate up to two arbitrary block nodes",
          "strategy": "vec_blocks(2)"
        },
        "high": {
          "description": "Generate up to four arbitrary block nodes",
          "strategy": "vec_blocks(4)"
        },
        "max": {
          "description": "Generate up to eight arbitrary block nodes",
          "strategy": "vec_blocks(8)"
        }
      },
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    },
    "archive": {
      "@id": "stencila:archive",
      "description": "Nodes, usually from within `content` of the article, that have been archived.",
      "strip": [
        "content",
        "archive"
      ],
      "dom": {
        "skip": true
      },
      "type": "array",
      "items": {
        "$ref": "Node.schema.json"
      }
    },
    "temporary": {
      "@id": "stencila:temporary",
      "description": "Temporary nodes on document",
      "strip": [
        "content",
        "temporary"
      ],
      "walk": true,
      "dom": {
        "skip": true
      },
      "type": "array",
      "items": {
        "$ref": "Node.schema.json"
      }
    }
  }
}