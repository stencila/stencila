{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/Function.schema.json",
  "@id": "stencila:Function",
  "title": "Function",
  "extends": [
    "Entity"
  ],
  "category": "flow",
  "description": "A function with a name, which might take Parameters and return a value of a certain type.",
  "status": "experimental",
  "required": [
    "type",
    "name",
    "parameters"
  ],
  "core": [
    "id",
    "returns"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "jats": {
        "attr": "id"
      },
      "type": "string"
    },
    "name": {
      "@id": "schema:name",
      "description": "The name of the function.",
      "$comment": "The name property is not required; this allows for anonymous functions\n(although these are not yet implemented in Stencila interpreters).\nThe regex allows for snake_case and camelCase names but excludes\nPascalCase for parameter names.\n",
      "type": "string",
      "pattern": "[a-z_][A-z0-9_]*"
    },
    "parameters": {
      "@id": "stencila:parameters",
      "description": "The parameters of the function.",
      "aliases": [
        "parameter"
      ],
      "type": "array",
      "items": {
        "$ref": "Parameter.schema.json"
      }
    },
    "returns": {
      "@id": "stencila:returns",
      "description": "The return type of the function.",
      "$ref": "Validator.schema.json"
    }
  }
}