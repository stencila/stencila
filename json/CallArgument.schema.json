{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/CallArgument.schema.json",
  "@id": "stencila:CallArgument",
  "title": "CallArgument",
  "nick": "cla",
  "extends": [
    "Parameter"
  ],
  "category": "flow",
  "description": "The value of a `Parameter` to call a document with.",
  "$comment": "A `CallArgument` extends `Parameter` by also has some of the same properties as `CodeExecutable` allowing\nan expression to be used to set the value of the parameter.\n",
  "status": "under-development",
  "proptest": {},
  "markdown": {
    "derive": false
  },
  "required": [
    "type",
    "name",
    "code"
  ],
  "core": [
    "id",
    "autoExec",
    "value",
    "programmingLanguage"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "autoExec": {
      "@id": "stencila:autoExec",
      "description": "Under which circumstances the code should be automatically executed.",
      "aliases": [
        "auto",
        "auto-exec",
        "auto_exec"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "AutomaticExecution.schema.json"
    },
    "compilationDigest": {
      "@id": "stencila:compilationDigest",
      "description": "A digest of the content, semantics and dependencies of the node.",
      "aliases": [
        "compilation-digest",
        "compilation_digest"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "CompilationDigest.schema.json"
    },
    "compilationErrors": {
      "@id": "stencila:compilationErrors",
      "description": "Errors generated when compiling the code.",
      "aliases": [
        "compilation-errors",
        "compilation_errors",
        "compilationError",
        "compilation-error",
        "compilation_error"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "CompilationError.schema.json"
      }
    },
    "executionDigest": {
      "@id": "stencila:executionDigest",
      "description": "The `compilationDigest` of the node when it was last executed.",
      "aliases": [
        "execution-digest",
        "execution_digest"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "CompilationDigest.schema.json"
    },
    "executionDependencies": {
      "@id": "stencila:executionDependencies",
      "description": "The upstream dependencies of this node.",
      "aliases": [
        "execution-dependencies",
        "execution_dependencies",
        "executionDependency",
        "execution-dependency",
        "execution_dependency"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionDependency.schema.json"
      }
    },
    "executionDependants": {
      "@id": "stencila:executionDependants",
      "description": "The downstream dependants of this node.",
      "aliases": [
        "execution-dependants",
        "execution_dependants",
        "executionDependant",
        "execution-dependant",
        "execution_dependant"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionDependant.schema.json"
      }
    },
    "executionTags": {
      "@id": "stencila:executionTags",
      "description": "Tags in the code which affect its execution.",
      "aliases": [
        "execution-tags",
        "execution_tags",
        "executionTag",
        "execution-tag",
        "execution_tag"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionTag.schema.json"
      }
    },
    "executionCount": {
      "@id": "stencila:executionCount",
      "description": "A count of the number of times that the node has been executed.",
      "$comment": "Intended to increment with each successive execution of the node, including across sessions.\nNote that this differs to the `execution_count` in Jupyter Notebook format which is\nthe \"code cell's prompt number\" and which resets at the start of each new session.\n",
      "aliases": [
        "execution-count",
        "execution_count"
      ],
      "strip": [
        "execution"
      ],
      "type": "integer",
      "minimum": 0.0
    },
    "executionRequired": {
      "@id": "stencila:executionRequired",
      "description": "Whether, and why, the code requires execution or re-execution.",
      "aliases": [
        "execution-required",
        "execution_required"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionRequired.schema.json"
    },
    "executionStatus": {
      "@id": "stencila:executionStatus",
      "description": "Status of the most recent, including any current, execution.",
      "aliases": [
        "execution-status",
        "execution_status"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionStatus.schema.json"
    },
    "executionActor": {
      "@id": "stencila:executionActor",
      "description": "The id of the actor that the node was last executed by.",
      "aliases": [
        "execution-actor",
        "execution_actor"
      ],
      "strip": [
        "execution"
      ],
      "type": "string"
    },
    "executionEnded": {
      "@id": "stencila:executionEnded",
      "description": "The timestamp when the last execution ended.",
      "aliases": [
        "execution-ended",
        "execution_ended"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "Timestamp.schema.json"
    },
    "executionDuration": {
      "@id": "stencila:executionDuration",
      "description": "Duration of the last execution.",
      "aliases": [
        "execution-duration",
        "execution_duration"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "Duration.schema.json"
    },
    "executionErrors": {
      "@id": "stencila:executionErrors",
      "description": "Errors when executing the node.",
      "aliases": [
        "execution-errors",
        "execution_errors",
        "executionError",
        "execution-error",
        "execution_error"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionError.schema.json"
      }
    },
    "name": {
      "@id": "schema:name",
      "description": "The name of the parameter.",
      "$comment": "This regex allows for snake_case and camelCase names but excludes\nPascalCase for names.\n",
      "proptest": {
        "min": {
          "description": "Generate a fixed name.",
          "value": "String::from(\"name\")"
        },
        "low": {
          "description": "Generate a random string of up to 10 alphanumeric characters (and at most one underscore to avoid\na clash with Markdown emphasis).\n",
          "regex": "[a-zA-Z_][a-zA-Z0-9]{0,9}"
        },
        "high": {
          "description": "Generate a random string of up to 100 characters (excluding control characters).\n",
          "regex": "[^\\p{C}]{1,100}"
        },
        "max": {
          "description": "Generate an arbitrary string.",
          "strategy": "String::arbitrary()"
        }
      },
      "jats": {
        "attr": "name"
      },
      "type": "string",
      "pattern": "[a-zA-Z][a-zA-Z0-9_]*"
    },
    "label": {
      "@id": "stencila:label",
      "description": "A short label for the parameter.",
      "type": "string"
    },
    "value": {
      "@id": "schema:value",
      "description": "The current value of the parameter.",
      "$ref": "Node.schema.json"
    },
    "default": {
      "@id": "schema:defaultValue",
      "description": "The default value of the parameter.",
      "$ref": "Node.schema.json"
    },
    "validator": {
      "@id": "stencila:validator",
      "description": "The validator that the value is validated against.",
      "$comment": "This property is large (in terms of bytes) so is best kept as a non-core\nproperty, so as not to inflate the size of the `Inline` enum in Rust.\n",
      "html": {
        "content": true
      },
      "$ref": "Validator.schema.json"
    },
    "derivedFrom": {
      "@id": "stencila:derivedFrom",
      "description": "The dotted path to the object (e.g. a database table column) that the parameter should be derived from",
      "aliases": [
        "derived-from",
        "derived_from"
      ],
      "type": "string"
    },
    "code": {
      "@id": "stencila:code",
      "description": "The code to be evaluated for the parameter.",
      "strip": [
        "code"
      ],
      "proptest": {
        "min": {
          "description": "Generate a simple fixed string of code.",
          "value": "Cord::new(\"code\")"
        },
        "low": {
          "description": "Generate a random string of up to 10 alphanumeric characters.\n",
          "strategy": "r\"[a-zA-Z0-9]{1,10}\".prop_map(Cord::new)"
        },
        "high": {
          "description": "Generate a random string of up to 100 characters (excluding control characters).\n",
          "strategy": "r\"[^\\p{C}]{1,100}\".prop_map(Cord::new)"
        },
        "max": {
          "description": "Generate an arbitrary string.",
          "strategy": "String::arbitrary().prop_map(Cord::new)"
        }
      },
      "$ref": "Cord.schema.json"
    },
    "programmingLanguage": {
      "@id": "schema:programmingLanguage",
      "description": "The programming language of the code.",
      "aliases": [
        "programming-language",
        "programming_language"
      ],
      "strip": [
        "code"
      ],
      "type": "string"
    }
  }
}