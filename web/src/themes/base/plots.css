/* Plot styles
 *
 * Purpose: Design tokens for plotting and data visualization theming
 *
 * Notes:
 * - Tokens provide library-agnostic design decisions for charts and plots
 * - Color palette designed for categorical series with perceptual distinctiveness
 * - Override --plot-color-1 through --plot-color-12 for brand-specific palettes
 * - Ramps calculated from --color-accent for automatic theme integration
 * - Heavily references semantic tokens for consistency with document theme
 *
 * Examples: docs/themes/plots.smd
 */

:root {
    /* Theme Selection
     *
     * Set --plot-theme to use a named theme, `custom` to apply the CSS variables defined below,
     * or `none` to have no theming and instead fallback to the defaults of plotting libraries.
     */
    --plot-theme: custom;

    /* Dimensions - Controls for plot sizing and aspect ratio
     *
     * --plot-width: Absolute width for PNG rendering. Supports in, cm, or px units.
     *   Example: 8in (default), 20cm, 800px
     *
     * --plot-height: Calculated from width รท aspect-ratio. Override for custom ratios.
     *   Example: calc(var(--plot-width) / var(--plot-aspect-ratio))
     *
     * --plot-aspect-ratio: Width/height ratio (unitless decimal). Used by both PNG
     *   and JS-based plots for visual consistency. Matches CSS aspect-ratio convention.
     *   Example: 1.5 (3:2 landscape), 1.0 (square), 1.777 (16:9 widescreen), 0.75 (3:4 portrait)
     *   Note: Landscape (wider) > 1.0, Portrait (taller) < 1.0, Square = 1.0
     *
     * --plot-dpi: Dots per inch for PNG rendering. Higher values = sharper but larger files.
     *   Example: 100 (default), 150 (high quality), 72 (screen)
     *
     * --plot-height-min: Minimum height for web display (prevents too-small plots).
     *   Example: 300px (default), 200px (compact), 400px (spacious)
     *
     * --plot-height-max: Maximum height for web display (prevents too-large plots).
     *   Example: 800px (default), 600px (compact), 1000px (spacious)
     *
     * Web display: PNGs and JS plots scale responsively while maintaining aspect ratio.
     * Document overrides: Code chunks can override these for individual plots.
     */
    --plot-aspect-ratio: 1.5;
    --plot-width: 8in;
    --plot-height: calc(var(--plot-width) / var(--plot-aspect-ratio));
    --plot-dpi: 100;
    --plot-height-min: 300px;
    --plot-height-max: 800px;

    /* Color Palette - Categorical colors for series/marks that need distinct hues
     *
     * Provides 12 colors for distinguishing different data series in plots.
     * First color uses theme accent for automatic theming. Colors 2-12 are
     * sensible defaults chosen for perceptual distinctiveness and accessibility.
     * Custom themes should override with brand colors.
     *
     * Library support:
     * - Supported: ECharts, Plotly, Vega-Lite, Python (matplotlib), R (ggplot2), R (base)
     * - Applied automatically to series in order, cycling after 12 series
     */
    --plot-color-1: var(--color-accent);
    --plot-color-1-dark: var(--color-accent-dark);

    --plot-color-2: hsl(160 70% 45%);
    --plot-color-2-dark: hsl(160 60% 55%);

    --plot-color-3: hsl(35 95% 55%);
    --plot-color-3-dark: hsl(35 85% 60%);

    --plot-color-4: hsl(280 70% 60%);
    --plot-color-4-dark: hsl(280 65% 65%);

    --plot-color-5: hsl(0 70% 55%);
    --plot-color-5-dark: hsl(0 65% 60%);

    --plot-color-6: hsl(190 65% 45%);
    --plot-color-6-dark: hsl(190 60% 55%);

    --plot-color-7: hsl(330 70% 60%);
    --plot-color-7-dark: hsl(330 65% 65%);

    --plot-color-8: hsl(120 55% 40%);
    --plot-color-8-dark: hsl(120 50% 50%);

    --plot-color-9: hsl(45 85% 50%);
    --plot-color-9-dark: hsl(45 80% 60%);

    --plot-color-10: hsl(250 55% 55%);
    --plot-color-10-dark: hsl(250 50% 65%);

    --plot-color-11: hsl(15 75% 55%);
    --plot-color-11-dark: hsl(15 70% 60%);

    --plot-color-12: hsl(200 50% 45%);
    --plot-color-12-dark: hsl(200 45% 55%);

    /* Color Ramp - Endpoints for continuous or discrete scales
     *
     * Defines start and end colors for sequential/continuous color scales (e.g., heatmaps).
     * Calculated from accent color by mixing with background. Libraries interpolate
     * between start/end to create smooth gradients or discrete steps.
     *
     * Library support:
     * - Supported: ECharts (heatmaps), Plotly (heatmaps), Vega-Lite (continuous scales),
     *   Python (matplotlib colormaps), R (ggplot2 continuous scales)
     * - Not supported: R (base plots - use stencila_theme$gradient programmatically)
     */
    --plot-ramp-start: color-mix(in oklch, var(--color-accent) 5%, var(--plot-background));
    --plot-ramp-start-dark: color-mix(in oklch, var(--color-accent-dark) 5%, var(--plot-background-dark));

    --plot-ramp-end: color-mix(in oklch, var(--color-accent) 95%, var(--plot-background));
    --plot-ramp-end-dark: color-mix(in oklch, var(--color-accent-dark) 95%, var(--plot-background-dark));

    /* Shape Palette - Categorical shapes for series/marks that need distinct symbols
     *
     * This palette contains 8 shapes chosen for maximum cross-library compatibility.
     * Each shape is guaranteed to be visually distinct across all supported plotting
     * libraries (Plotly, ECharts, Vega-Lite, matplotlib, ggplot2, R base).
     *
     * All shapes map to open/unfilled variants in each library for better overlap
     * visibility and discrimination. This allows overlapping points to remain visible
     * and makes it easier to assess data density in scatter plots.
     *
     * Selection rationale:
     * - Triangle variants (triangle-down/left/right) are excluded because ECharts
     *   only supports a single triangle shape
     * - Plus/cross distinction cannot be maintained across all libraries (Vega-Lite
     *   limitation), so we use cross as the primary variant
     *
     * The 8 shapes below provide the maximum set of visually distinct symbols that
     * work consistently across all plotting backends, all rendered as open/unfilled.
     */
    --plot-shape-1: circle;
    --plot-shape-2: square;
    --plot-shape-3: triangle;
    --plot-shape-4: diamond;
    --plot-shape-5: cross;
    --plot-shape-6: star;
    --plot-shape-7: pentagon;
    --plot-shape-8: hexagon;

    /* Linetype Palette - Categorical line types for series that need distinct line styles
     *
     * This palette contains 6 line types chosen for maximum cross-library compatibility.
     * Each line type is guaranteed to be supported across all plotting libraries
     * (Plotly, ECharts, Vega-Lite, matplotlib, ggplot2, R base).
     *
     * Line types are applied to line charts with multiple series to distinguish them
     * visually when color alone is insufficient (e.g., for colorblind accessibility
     * or black-and-white printing).
     *
     * The 6 line types below provide visually distinct patterns that work consistently
     * across all plotting backends.
     */
    --plot-line-type-1: solid;
    --plot-line-type-2: dashed;
    --plot-line-type-3: dotted;
    --plot-line-type-4: dashdot;
    --plot-line-type-5: longdash;
    --plot-line-type-6: twodash;

    /* Backgrounds - Plot container and panel (data region) colors
     *
     * --plot-background: The outer plot area including titles, legends, and padding.
     *   Defaults to surface background for seamless document integration.
     *
     * --plot-panel: The inner data region (plot area) where marks/geometries are drawn.
     *   Defaults to plot background. Override for contrast (e.g., white panel on gray plot).
     *
     * Library support:
     * - Supported: ECharts, Plotly, Vega-Lite, Python (matplotlib), R (ggplot2), R (base)
     */
    --plot-background: var(--surface-background);
    --plot-background-dark: var(--surface-background-dark);

    --plot-panel: var(--plot-background);
    --plot-panel-dark: var(--plot-background-dark);

    /* Panel Border - Controls whether to show borders around the plot panel
     *
     * When true: Shows all four borders (complete box) around the data region
     * When false: Shows only left and bottom borders (L-shape, axes only)
     *
     * The border color comes from --plot-axis-line-color for visual consistency.
     * The border width defaults to --border-width-default when enabled.
     *
     * Library support:
     * - Supported: ECharts (grid.borderWidth), Plotly (axis.mirror), Vega-Lite (view.stroke),
     *   Python (matplotlib axes.spines), R (ggplot2 panel.border), R (base par bty)
     */
    --plot-panel-border: true;

    /* Typography - Font properties and text sizing for plot elements
     *
     * --plot-text-color: Primary color for all text elements (titles, labels, legends)
     * --plot-font-family: Font stack for all plot text. Defaults to document sans-serif.
     * --plot-font-size: Base font size for tick labels and body text
     * --plot-title-size: Font size for main plot title
     * --plot-subtitle-size: Font size for plot subtitle
     *
     * Library support:
     * - Supported: ECharts, Plotly, Vega-Lite, Python (matplotlib), R (ggplot2), R (base)
     * - Note: Subtitle not supported in Python (matplotlib has no native subtitle)
     */
    --plot-text-color: var(--text-color-primary);
    --plot-text-color-dark: var(--text-color-primary-dark);

    --plot-font-family: var(--font-family-sans);

    --plot-font-size: calc(var(--text-font-size) * 0.85);
    --plot-title-size: calc(var(--text-font-size) * 1.0);
    --plot-subtitle-size: calc(var(--text-font-size) * 0.92);

    /* Padding - Space around the entire plot including axis labels, titles, and legends
     *
     * These tokens control the whitespace from the container edge to the outermost elements
     * of the plot (axis labels, titles, etc.). The padding creates breathing room and ensures
     * plots don't touch their container edges.
     *
     * What's included in padding:
     * - Axis labels (tick labels) and axis titles (e.g., "x", "y")
     * - Plot titles and subtitles
     * - Legends (if positioned outside the plot area)
     * - Panel borders and grid lines
     *
     * Effect across plotting libraries:
     * - ECharts: Applied via grid with containLabel:true (labels fit within padding)
     * - Vega-Lite: Applied via spec padding with contains:'padding' (labels in padded area)
     * - Plotly.js: Applied via CSS padding with automargin (labels auto-sized, then padded)
     * - matplotlib: Applied via constrained_layout h_pad/w_pad (prevents label overlap)
     * - ggplot2: Applied via plot.margin (space around complete plot)
     * - R base: Applied via mar parameter (includes minimums for labels + extra padding)
     *
     * All implementations ensure consistent visual result: padding is measured from the
     * container edge to the plot area, with labels fitting naturally within or before that space.
     */
    --plot-padding: var(--space-4);
    --plot-padding-top: var(--plot-padding);
    --plot-padding-bottom: var(--plot-padding);
    --plot-padding-right: var(--plot-padding);
    --plot-padding-left: var(--plot-padding);

    /* Axes & Grid - Structure and reference lines for data interpretation
     *
     * Axis properties:
     * --plot-axis-line-color: Color of axis lines (and panel borders when enabled)
     * --plot-axis-line-width: Width of axis lines (typically 1px)
     * --plot-axis-title-size: Font size for axis labels (e.g., "x", "y", "Time")
     * --plot-axis-title-weight: Font weight for axis labels (normal or bold)
     * --plot-axis-title-color: Color for axis labels
     *
     * Grid properties:
     * --plot-grid-color: Color of gridlines. Subtle by default (15% text color mixed with panel)
     * --plot-grid-width: Default width for both x and y gridlines
     * --plot-grid-x-width: Width of vertical gridlines (overrides grid-width if set)
     * --plot-grid-y-width: Width of horizontal gridlines (overrides grid-width if set)
     * Note: Set width to 0 to hide gridlines for that axis
     *
     * Library support:
     * - Supported: ECharts, Plotly, Vega-Lite, Python (matplotlib), R (ggplot2), R (base)
     * - Axis-specific grid widths supported: Python, R (ggplot2)
     * - Axis-specific grid widths partially supported: ECharts, Plotly, Vega-Lite (use max width)
     */
    --plot-axis-line-color: var(--plot-text-color);
    --plot-axis-line-color-dark: var(--plot-text-color-dark);
    --plot-axis-line-width: var(--border-width-default);

    --plot-axis-title-size: calc(var(--text-font-size) * 0.85);
    --plot-axis-title-weight: var(--font-weight-normal);
    --plot-axis-title-color: var(--plot-text-color);
    --plot-axis-title-color-dark: var(--plot-text-color-dark);

    --plot-grid-color: color-mix(in srgb, var(--text-color-primary) 15%, var(--plot-panel));
    --plot-grid-color-dark: color-mix(in srgb, var(--text-color-primary-dark) 15%, var(--plot-panel-dark));
    --plot-grid-width: var(--border-width-default);
    --plot-grid-x-width: var(--plot-grid-width);
    --plot-grid-y-width: var(--plot-grid-width);

    /* Legends - Visual guides mapping colors/shapes to data series
     *
     * Legend styling:
     * --plot-legend-background: Background color of legend box. Defaults to panel color.
     * --plot-legend-text-color: Color of legend labels
     * --plot-legend-text-size: Font size for legend text
     * --plot-legend-border-color: Color of legend box border
     * --plot-legend-border-width: Width of legend box border
     *
     * Library support for styling:
     * - Background supported: ECharts, Plotly, Python (matplotlib), R (ggplot2)
     * - Border supported: ECharts, Plotly, Python (matplotlib stores as custom param), R (ggplot2)
     * - Border not supported: Vega-Lite (no legend box borders)
     * - Not applicable: R (base plots - legends added manually)
     */
    --plot-legend-background: var(--plot-panel);
    --plot-legend-background-dark: var(--plot-panel-dark);

    --plot-legend-text-color: var(--plot-text-color);
    --plot-legend-text-color-dark: var(--plot-text-color-dark);
    --plot-legend-text-size: calc(var(--text-font-size) * 0.85);

    --plot-legend-border-color: color-mix(in srgb, var(--text-color-primary) 20%, var(--surface-foreground));
    --plot-legend-border-color-dark: color-mix(in srgb, var(--text-color-primary-dark) 20%, var(--surface-foreground-dark));

    --plot-legend-border-width: var(--border-width-default);

    /* Legend Position - Where to place the legend relative to the plot
     *
     * Valid values: auto, top, bottom, left, right, none
     * - auto: Library-specific automatic positioning (typically right or best location)
     * - top/bottom: Horizontal legend centered above/below plot
     * - left/right: Vertical legend on left/right side
     * - none: Hide legend
     *
     * Library support:
     * - Fully supported: ECharts, Plotly, Vega-Lite
     * - Partially supported: Python (matplotlib/seaborn) - Stored in plt.rcParams["legend.loc"]
     *   but must be manually applied with plt.legend(loc=plt.rcParams["legend.loc"]) or
     *   seaborn.move_legend() due to matplotlib not supporting global legend positioning via rcParams
     * - Partially supported: R (ggplot2) - Position can be set via theme
     * - Not supported: R (base plots) - Legends added manually
     */
    --plot-legend-position: auto;

    /* Tooltips - Interactive hover information displays
     *
     * Controls the appearance of tooltips/hover labels that appear when interacting
     * with plot elements (hovering over points, bars, etc.).
     *
     * --plot-tooltip-background: Background color of tooltip box. Slightly darkened for contrast.
     * --plot-tooltip-text-color: Text color inside tooltip
     *
     * Library support:
     * - Supported: ECharts (tooltip), Plotly (hoverlabel)
     * - Not supported: Vega-Lite (uses browser defaults), Python (matplotlib has no native tooltips),
     *   R (ggplot2 has no native tooltips), R (base has no native tooltips)
     * - Note: Interactive tooltips only apply to web-based JS plotting libraries
     */
    --plot-tooltip-background: color-mix(in srgb, var(--surface-background) 95%, black);
    --plot-tooltip-background-dark: color-mix(in srgb, var(--surface-background-dark) 85%, black);

    --plot-tooltip-text-color: var(--text-color-primary);
    --plot-tooltip-text-color-dark: var(--text-color-primary-dark);

    /* Marks - Visual properties for geometric elements (points, lines, areas)
     *
     * Point properties:
     * --plot-point-opacity: Fill opacity for point markers (scatter plots, line symbols)
     *   - 0: Open/unfilled points with stroke only (default for better overlap visibility)
     *   - 0 < x < 1: Semi-transparent filled points (e.g., 0.7 for 70% opacity)
     *   - 1: Solid filled points
     *   Note: Shape is determined by --plot-shape-* palette
     * --plot-point-size: Size of point markers in pixels
     *
     * Line properties:
     * --plot-line-width: Width of lines in line charts, paths, and strokes
     *   Note: Line style is determined by --plot-line-type-* palette
     *
     * Area properties:
     * --plot-area-opacity: Fill opacity for area charts and filled regions (e.g., 0.25 for 25%)
     *
     * Library support:
     * - Point opacity supported: ECharts, Plotly, Vega-Lite, Python (matplotlib), R (ggplot2)
     * - Point size supported: ECharts, Plotly, Vega-Lite, Python (matplotlib), R (ggplot2), R (base)
     * - Line width supported: ECharts, Plotly, Vega-Lite, Python (matplotlib), R (ggplot2), R (base)
     * - Area opacity supported: Plotly, Vega-Lite
     * - Area opacity not supported: ECharts, Python (matplotlib), R (ggplot2), R (base)
     */
    --plot-point-opacity: 0;
    --plot-point-size: calc(var(--space-2) * 0.75);

    --plot-line-width: var(--border-width-thick);

    --plot-area-opacity: 0.25;
}

/* Dark Mode Application - System Preference or Explicit User Choice */
@media (prefers-color-scheme: dark) {
    :root:not([data-color-scheme="light"]) {
        --plot-color-1: var(--plot-color-1-dark);
        --plot-color-2: var(--plot-color-2-dark);
        --plot-color-3: var(--plot-color-3-dark);
        --plot-color-4: var(--plot-color-4-dark);
        --plot-color-5: var(--plot-color-5-dark);
        --plot-color-6: var(--plot-color-6-dark);
        --plot-color-7: var(--plot-color-7-dark);
        --plot-color-8: var(--plot-color-8-dark);
        --plot-color-9: var(--plot-color-9-dark);
        --plot-color-10: var(--plot-color-10-dark);
        --plot-color-11: var(--plot-color-11-dark);
        --plot-color-12: var(--plot-color-12-dark);
        --plot-ramp-start: var(--plot-ramp-start-dark);
        --plot-ramp-end: var(--plot-ramp-end-dark);
        --plot-background: var(--plot-background-dark);
        --plot-panel: var(--plot-panel-dark);
        --plot-text-color: var(--plot-text-color-dark);
        --plot-axis-line-color: var(--plot-axis-line-color-dark);
        --plot-axis-title-color: var(--plot-axis-title-color-dark);
        --plot-grid-color: var(--plot-grid-color-dark);
        --plot-legend-background: var(--plot-legend-background-dark);
        --plot-legend-text-color: var(--plot-legend-text-color-dark);
        --plot-legend-border-color: var(--plot-legend-border-color-dark);
        --plot-tooltip-background: var(--plot-tooltip-background-dark);
        --plot-tooltip-text-color: var(--plot-tooltip-text-color-dark);
    }
}

:root[data-color-scheme="dark"] {
    --plot-color-1: var(--plot-color-1-dark);
    --plot-color-2: var(--plot-color-2-dark);
    --plot-color-3: var(--plot-color-3-dark);
    --plot-color-4: var(--plot-color-4-dark);
    --plot-color-5: var(--plot-color-5-dark);
    --plot-color-6: var(--plot-color-6-dark);
    --plot-color-7: var(--plot-color-7-dark);
    --plot-color-8: var(--plot-color-8-dark);
    --plot-color-9: var(--plot-color-9-dark);
    --plot-color-10: var(--plot-color-10-dark);
    --plot-color-11: var(--plot-color-11-dark);
    --plot-color-12: var(--plot-color-12-dark);
    --plot-ramp-start: var(--plot-ramp-start-dark);
    --plot-ramp-end: var(--plot-ramp-end-dark);
    --plot-background: var(--plot-background-dark);
    --plot-panel: var(--plot-panel-dark);
    --plot-text-color: var(--plot-text-color-dark);
    --plot-axis-line-color: var(--plot-axis-line-color-dark);
    --plot-axis-title-color: var(--plot-axis-title-color-dark);
    --plot-grid-color: var(--plot-grid-color-dark);
    --plot-legend-background: var(--plot-legend-background-dark);
    --plot-legend-text-color: var(--plot-legend-text-color-dark);
    --plot-legend-border-color: var(--plot-legend-border-color-dark);
    --plot-tooltip-background: var(--plot-tooltip-background-dark);
    --plot-tooltip-text-color: var(--plot-tooltip-text-color-dark);
}