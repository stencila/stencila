/* List styles
 *
 * Schema: [List](../../schema/List.yaml)
 * Purpose: Ordered and unordered lists with nested list support.
 *
 * DOM Structure:
 * <stencila-list id=xxx depth=N ancestors=Parent order=Unordered>
 *     <ul slot=items>
 *         <stencila-list-item id=xxx depth=N+1 ancestors=Parent.List>
 *             <li slot=content>
 *                 <stencila-paragraph id=xxx depth=N+2 ancestors=Parent.List.ListItem>
 *                     <p slot=content>
 *                         <stencila-text id=xxx depth=N+3 ancestors=Parent.List.ListItem.Paragraph>List item text</stencila-text>
 *                     </p>
 *                 </stencila-paragraph>
 *             </li>
 *         </stencila-list-item>
 *     </ul>
 * </stencila-list>
 *
 * Key Attributes:
 * - order: List type from [ListOrder](../../schema/ListOrder.yaml) (Unordered, Ascending, Descending)
 *
 * Slots:
 * - items: Contains the HTML list element (ul or ol) with list items
 *
 * Notes:
 * - List order determines HTML element: Unordered → ul, Ascending/Descending → ol
 * - Each list item can contain one or Block nodes but often has a single Paragraph
 * - Supports nested lists with different marker styles
 *
 * Examples: examples/conversion/list/list.dom.html
 */

:root {
    /* List Design Tokens */
    --list-indent: var(--space-6);
    --list-indent-nested: var(--space-2);
    --list-spacing: var(--space-2);
    --list-spacing-nested: var(--space-2);
    --list-marker-gap: var(--space-2);
    --list-marker-color: var(--text-color-muted);
    --list-marker-unordered: disc;
    --list-marker-ordered: decimal;
    --list-marker-nested-unordered: circle;
    --list-marker-nested-ordered: lower-alpha;
}

stencila-list {

    ul,
    ol {
        margin: 0;
        padding: 0;
    }

    li p {
        margin: 0;
        max-width: none;
    }

    li p:first-child {
        display: inline-block;
        width: 100%;
    }

    ul,
    ol {
        margin-top: var(--paragraph-spacing-md);
        padding-left: var(--list-indent);
        list-style-position: outside;
    }

    ul {
        list-style-type: var(--list-marker-unordered);
    }

    ol {
        list-style-type: var(--list-marker-ordered);
    }

    /* Nested lists */
    ul ul,
    ol ol,
    ul ol,
    ol ul {
        margin-top: var(--list-spacing-nested);
        margin-left: var(--list-indent-nested);
    }

    ul ul,
    ol ul {
        list-style-type: var(--list-marker-nested-unordered);
    }

    ol ol,
    ul ol {
        list-style-type: var(--list-marker-nested-ordered);
    }

    /* List items */
    li {
        margin-bottom: var(--list-spacing);
        line-height: var(--paragraph-line-height);
        padding-left: var(--list-marker-gap);
    }

    li::marker {
        color: var(--list-marker-color);
    }

    /* Multiple paragraphs within list items */
    li p+p {
        margin-top: var(--paragraph-spacing-sm);
    }

}

@media (max-width: 640px) {

    ul,
    ol {
        padding-left: var(--space-4);
    }

    li {
        padding-left: var(--space-1);
        margin-bottom: var(--space-1);
    }

    /* Reduce nested list indentation on mobile */
    ul ul,
    ol ol,
    ul ol,
    ol ul {
        margin-left: var(--space-1);
        padding-left: var(--space-3);
    }
}