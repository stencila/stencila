# TextMate grammar for Stencila Markdown
#
# Much of this is based on the VSCode builtin Markdown grammar at
#  https://github.com/microsoft/vscode-markdown-tm-grammar/blob/main/markdown.tmLanguage.base.yaml
#
# The scope `name` given to captures determines how they are highlighted by different themes.
# The best place to look when choosing the right scope seems to be in a VSCode theme definition
# file e.g.
#   https://github.com/microsoft/vscode/blob/main/extensions/theme-monokai/themes/monokai-color-theme.json

scopeName: source.smd
patterns:
  - include: "#frontMatter"
  - include: "#block"
repository:
  block:
    patterns:
      # Order is important for matching!
      - include: "#separator"
      - include: "#heading"
      - include: "#blockquote"
      - include: "#lists"
      - include: "#math-block"
      - include: "#code-chunk"
      - include: "#code-block"
      - include: "#include-block"
      - include: "#call-block"
      - include: "#instruction-block"
      - include: "#suggestion-block"
      - include: "#insert-block"
      - include: "#delete-block"
      - include: "#replace-block"
      - include: "#with-block"
      - include: "#for-block"
      - include: "#if-block"
      - include: "#else-block"
      - include: "#end-block"
      - include: "#figure-block"
      - include: "#table-block"
      - include: "#styled-block"
      - include: "#raw_block"
      - include: "#link-def"
      - include: "#table"
      - include: "#paragraph"
  inline:
    patterns:
      # Order is important for matching!
      - include: "#html"
      - include: "#parameter"
      - include: "#math-inline"
      - include: "#instruction-inline"
      - include: "#suggestion-inline"
      - include: "#insert-inline"
      - include: "#delete-inline"
      - include: "#replace-inline"
      - include: "#styled-inline"
      - include: "#ampersand"
      - include: "#bracket"
      - include: "#bold"
      - include: "#italic"
      - include: "#raw"
      - include: "#strikethrough"
      - include: "#escape"
      - include: "#image-inline"
      - include: "#image-ref"
      - include: "#link-email"
      - include: "#link-inet"
      - include: "#link-inline"
      - include: "#link-ref"
      - include: "#link-ref-literal"
      - include: "#link-ref-shortcut"

  ########## Parameter ##########

  parameter:
    name: meta.stencila.parameter
    match: (\&)\[([\w-]+)\] # Currently ignores parameter options in curly braces
    captures:
      "1": { name: markup.heading } # &
      "2": { name: variable.name } # name

  ########## Math Block & Inline ##########

  math-block:
    name: meta.stencila.math-block
    begin: ^(\$\$)$
    beginCaptures:
      "1": { name: markup.heading } # $$
    end: ^(\$\$)$
    endCaptures:
      "1": { name: markup.heading } # $$
    patterns:
      - contentName: meta.embedded.language.tex
        include: text.tex

  math-inline:
    name: meta.stencila.math-inline
    match: (\$)(.*?)(\$)
    captures:
      "1": { name: markup.heading } # $
      "2": # math
        patterns:
          - begin: .*
            end: $
            contentName: meta.embedded.language.tex
            include: text.tex
      "3": { name: markup.heading } # $

  ########## CodeBlock ##########

  code-block:
    patterns:
      - include: "#code-block.unknown-lang"

  code-block.template:
    name: meta.stencila.code-block.LANG_NAME
    begin: >
      (?x)
      ^
        (`{3,})
        \s*
        (LANG_ALIASES)
        \s*
      $
    beginCaptures:
      "1": { name: markup.heading } # backticks
      "2": { name: variable.other } # language
    end: ^(`{3,})\s*$
    endCaptures:
      "1": { name: markup.heading } # backticks
    patterns:
      - include: LANG_INCLUDE

  code-block.unknown-lang:
    name: meta.stencila.code-block.unknown-lang
    begin: >
      (?x)
      ^
        (`{3,})
        \s*
        (.*)
      $
    beginCaptures:
      "1": { name: markup.heading } # backticks
      "2": { name: variable.other } # language
    end: ^(`{3,})\s*$
    endCaptures:
      "1": { name: markup.heading } # backticks

  ########## CodeChunk ##########

  code-chunk:
    patterns:
      - include: "#code-chunk.unknown-lang"
      - include: "#code-chunk.no-lang"

  code-chunk.template:
    name: meta.stencila.code-chunk.LANG_NAME
    begin: >
      (?x)
      ^
        (`{3,})
        \s*
        (LANG_ALIASES)
        \s+
        (exec)
        (?:
          \s+
          (always|auto|locked)
        )?
        \s*
      $
    beginCaptures:
      "1": { name: markup.heading.stencila } # backticks
      "2": { name: variable.other } # language
      "3": { name: keyword.control.stencila } # exec
      "4": { name: keyword.control.stencila } # mode
    end: ^(`{3,})\s*$
    endCaptures:
      "1": { name: markup.heading } # backticks
    patterns:
      - include: LANG_INCLUDE

  code-chunk.unknown-lang:
    name: meta.stencila.code-chunk.unknown-lang
    begin: >
      (?x)
      ^
        (`{3,})
        \s*
        (\w+)
        \s+
        (exec)
        (?:
          \s+
          (always|auto|locked)
        )?
        \s*
      $
    beginCaptures:
      "1": { name: markup.heading.stencila } # backticks
      "2": { name: variable.other } # language
      "3": { name: keyword.control.stencila } # exec
      "4": { name: keyword.control.stencila } # mode
    end: ^(`{3,})\s*$
    endCaptures:
      "1": { name: markup.heading } # backticks

  code-chunk.no-lang:
    name: meta.stencila.code-chunk.no-lang
    begin: >
      (?x)
      ^
        (`{3,})
        \s*
        (exec)
        (?:
          \s+
          (always|auto|locked)
        )?
        \s*
      $
    beginCaptures:
      "1": { name: markup.heading.stencila } # backticks
      "2": { name: keyword.control.stencila } # exec
      "3": { name: keyword.control.stencila } # mode
    end: ^(`{3,})\s*$
    endCaptures:
      "1": { name: markup.heading.stencila } # backticks

  ########## InstructionBlock & InstructionInline ##########

  instruction-block:
    name: meta.stencila.instruction-block
    match: >
      (?x)
      ^
        (?:
          (?:(:{3,})\s*(new|edit|update))|
          (/)
        )
        \s+
        (?:
          (@)
          ([\w-]*)
          \s*
        )?
        (.*)
      $
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # instruction type
      "3": { name: markup.heading.stencila } # forward slash
      "4": { name: decorator.keyword.stencila } # @
      "5": { name: decorator.keyword.stencila } # assignee
      "6": { name: comment.line } # message

  with-block:
    name: meta.stencila.with-block
    match: ^(:{3,})\s*(with)\s*$
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # with

  instruction-inline:
    name: meta.stencila.instruction-inline
    match: >
      (?x)
      \[\[
        \s*
        (new|edit|update)
        \s+
        (?:
          (@)
          ([\w-]*)
          \s*
        )?
        (.*?)
        (?:
          (>>)
          (.*?)
        )?
      \]\]
    captures:
      "1": { name: keyword.control.stencila } # instruction type
      "2": { name: decorator.keyword.stencila } # @
      "3": { name: decorator.keyword.stencila } # assignee
      "4": { name: comment.line } # message
      "5": { name: keyword.control.stencila } # >>

  ########## Suggestions: Block & Inline ##########

  insert-block:
    name: meta.stencila.insert-block
    match: >
      (?x)
      ^
        (:{3,})
        \s*
        (insert)
        \s+
        (?:
          (accept)|
          (reject)|
          .*
        )?
        \s*
      $
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # insert
      "3": { name: accept.stencila } # accept
      "4": { name: error.stencila } # reject

  insert-inline:
    name: meta.stencila.insert-inline
    match: >
      (?x)
      \[\[
        \s*
        (insert)
        \s
        (.*?)
      \]\]
    captures:
      "1": { name: keyword.control.stencila } # insert

  suggestion-block:
    name: meta.stencila.suggestion-block
    match: >
      (?x)
      ^
        (:{3,})
        \s*
        (suggest)
        \s+
        (?:
          (accept)|
          (reject)|
          .*
        )?
        \s*
      $
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # suggest
      "3": { name: accept.stencila } # accept
      "4": { name: error.stencila } # reject

  suggestion-inline:
    name: meta.stencila.suggestion-inline
    match: >
      (?x)
      \[\[
        \s*
        (suggest)
        \s
        (.*?)
      \]\]
    captures:
      "1": { name: keyword.control.stencila } # suggest

  delete-block:
    name: meta.stencila.delete-block
    match: >
      (?x)
      ^
        (:{3,})
        \s*
        (delete)
        \s+
        (?:
          (accept)|
          (reject)|
          .*
        )?
        \s*
      $
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # delete
      "3": { name: accept.stencila } # accept
      "4": { name: error.stencila } # reject

  delete-inline:
    name: meta.stencila.delete-inline
    match: >
      (?x)
      \[\[
        \s*
        (delete)
        \s
        (.*?)
      \]\]
    captures:
      "1": { name: keyword.control.stencila } # delete

  replace-block:
    name: meta.stencila.replace-block
    match: >
      (?x)
      ^
        (:{3,})
        \s*
        (replace)
        \s+
        (?:
          (accept)|
          (reject)|
          .*
        )?
        \s*
      $
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # replace
      "3": { name: accept.stencila } # accept
      "4": { name: error.stencila } # reject

  replace-inline:
    name: meta.stencila.replace-inline
    match: >
      (?x)
      \[\[
        \s*
        (replace)
        \s
        (.*?)
        (>>)
        (.*?)
      \]\]
    captures:
      "1": { name: keyword.control.stencila } # replace
      "3": { name: keyword.control.stencila } # >>

  ########## IncludeBlock ##########

  include-block:
    name: meta.stencila.include-block
    match: ^(:{3,})\s*(include)\s+(.*)$
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # include
      "3": { name: variable.name.stencila } # source

  ########## CallBlock ##########

  call-block:
    name: meta.stencila.call-block
    match: ^(:{3,})\s*(call)\s+(.*)$
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # include
      "3": { name: variable.name.stencila } # source

  ########## IfBlock ##########

  if-block:
    name: meta.stencila.if-block
    match: ^(:{3,})\s*(if|elif)\s+(.*)$
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # if
      "3": # code
        patterns:
          - begin: .*
            end: $
            contentName: meta.embedded.language.javascript
            include: source.js

  else-block:
    name: meta.stencila.else-block
    match: ^(:{3,})\s*(else)\s*$
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # else

  end-block:
    name: meta.stencila.end-block
    match: ^(:{3,})\s*$
    captures:
      "1": { name: markup.heading.stencila } # semicolons

  ########## ForBlock ##########

  for-block:
    patterns:
      - include: "#for-block.sql"
      - include: "#for-block.no-lang"

  for-block.sql:
    name: meta.stencila.for-block.sql
    match: ^(:{3,})\s*(for)\s+([\w]+)\s+(in)\s+(select\s*.*)$
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # for
      "3": { name: variable.name } # variable
      "4": { name: keyword.control.stencila } # in
      "5": # code
        patterns:
          - begin: .*
            end: $
            contentName: meta.embedded.language.sql
            include: source.sql

  for-block.no-lang:
    name: meta.stencila.for-block.no-lang
    match: ^(:{3,})\s*(for)\s+([\w]+)\s+(in)\s+(.*)$
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # for
      "3": { name: variable.name } # variable
      "4": { name: keyword.control.stencila } # in
      "5": # code
        patterns:
          - begin: .*
            end: $
            contentName: meta.embedded.language.javascript
            include: source.js

  ########## Figure & Table ##########

  figure-block:
    name: meta.stencila.figure-block
    match: >
      (?x)
      ^
        (:{3,})
        \s*
        (figure)
        \s+
        (.*)
      $
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # figure
      "3": { name: variable.name } # label

  table-block:
    name: meta.stencila.table-block
    match: >
      (?x)
      ^
        (:{3,})
        \s*
        (table)
        \s+
        (.*)
      $
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": { name: keyword.control.stencila } # table
      "3": { name: variable.name } # label

  ########## StyledBlock & StyledInline ##########

  styled-block:
    name: meta.stencila.styled-block
    match: >
      (?x)
      ^
        (:{3,})
        \s*
        (\{
          .*?
        \})
        \s*
      $
    captures:
      "1": { name: markup.heading.stencila } # semicolons
      "2": # code
        patterns:
          - begin: .*
            end: $
            contentName: meta.embedded.language.css
            include: source.css

  styled-inline:
    name: meta.stencila.styled-inline
    match: >
      (?x)
      \[
        .*?
      \](\{
        .*?
      \})
    captures:
      "1": # code
        patterns:
          - begin: .*
            end: $
            contentName: meta.embedded.language.css
            include: source.css

  # The following grammar rules are taken from the VSCode builtin Markdown grammar at
  #   https://github.com/microsoft/vscode-markdown-tm-grammar/blob/main/markdown.tmLanguage.base.yaml
  # usually with little modification, particularly to regular expressions.

  paragraph:
    name: meta.stencila.paragraph
    begin: (^|\G)[ ]{0,3}(?=[^ \t\n])
    while: (^|\G)((?=\s*[-=]{3,}\s*$)|[ ]{4,}(?=[^ \t\n]))
    patterns:
      - include: "#inline"
      - include: text.html.derivative
      - include: "#heading-setext"

  frontMatter:
    begin: \A-{3}\s*$
    end: (^|\G)-{3}|\.{3}\s*$
    contentName: meta.embedded.block.frontmatter
    patterns:
      - { include: source.yaml }

  blockquote:
    begin: (^|\G)[ ]{0,3}(>) ?
    captures:
      "2": { name: punctuation.definition.quote.begin.markdown }
    name: markup.quote.markdown
    patterns:
      - { include: "#block" }
    while: (^|\G)\s*(>) ?

  heading:
    match: (?:^|\G)[ ]{0,3}(#{1,6}\s+(.*?)(\s+#{1,6})?\s*)$
    captures:
      "1":
        patterns:
          - match: (#{6})\s+(.*?)(?:\s+(#+))?\s*$
            name: "heading.6.markdown"
            captures:
          - match: (#{6})\s+(.*?)(?:\s+(#+))?\s*$
            name: "heading.6.markdown"
            captures:
              "1": { name: punctuation.definition.heading.markdown }
              "2":
                name: entity.name.section.markdown
                patterns:
                  [{ include: "#inline" }, { include: text.html.derivative }]
              "3": { name: punctuation.definition.heading.markdown }
          - match: (#{5})\s+(.*?)(?:\s+(#+))?\s*$
            name: "heading.5.markdown"
            captures:
              "1": { name: punctuation.definition.heading.markdown }
              "2":
                name: entity.name.section.markdown
                patterns:
                  [{ include: "#inline" }, { include: text.html.derivative }]
              "3": { name: punctuation.definition.heading.markdown }
          - match: (#{4})\s+(.*?)(?:\s+(#+))?\s*$
            name: "heading.4.markdown"
            captures:
              "1": { name: punctuation.definition.heading.markdown }
              "2":
                name: entity.name.section.markdown
                patterns:
                  [{ include: "#inline" }, { include: text.html.derivative }]
              "3": { name: punctuation.definition.heading.markdown }
          - match: (#{3})\s+(.*?)(?:\s+(#+))?\s*$
            name: "heading.3.markdown"
            captures:
              "1": { name: punctuation.definition.heading.markdown }
              "2":
                name: entity.name.section.markdown
                patterns:
                  [{ include: "#inline" }, { include: text.html.derivative }]
              "3": { name: punctuation.definition.heading.markdown }
          - match: (#{2})\s+(.*?)(?:\s+(#+))?\s*$
            name: "heading.2.markdown"
            captures:
              "1": { name: punctuation.definition.heading.markdown }
              "2":
                name: entity.name.section.markdown
                patterns:
                  [{ include: "#inline" }, { include: text.html.derivative }]
              "3": { name: punctuation.definition.heading.markdown }
          - match: (#{1})\s+(.*?)(?:\s+(#+))?\s*$
            name: "heading.1.markdown"
            captures:
              "1": { name: punctuation.definition.heading.markdown }
              "2":
                name: entity.name.section.markdown
                patterns:
                  [{ include: "#inline" }, { include: text.html.derivative }]
              "3": { name: punctuation.definition.heading.markdown }
    name: markup.heading.markdown

  heading-setext:
    patterns:
      - {
          match: '^(={3,})(?=[ \t]*$\n?)',
          name: markup.heading.setext.1.markdown,
        } # first level setext header (underlined with equals)
      - {
          match: '^(-{3,})(?=[ \t]*$\n?)',
          name: markup.heading.setext.2.markdown,
        } # second level setext header (underlined with dashes)

  html:
    patterns:
      - begin: (^|\G)\s*(<!--)
        captures:
          "1": { name: punctuation.definition.comment.html }
          "2": { name: punctuation.definition.comment.html }
        end: (-->)
        name: comment.block.html
      - begin: (?i)(^|\G)\s*(?=<(script|style|pre)(\s|$|>)(?!.*?</(script|style|pre)>))
        end: (?i)(.*)((</)(script|style|pre)(>))
        endCaptures:
          "1": { patterns: [{ include: text.html.derivative }] }
          "2": { name: meta.tag.structure.$4.end.html }
          "3": { name: punctuation.definition.tag.begin.html }
          "4": { name: entity.name.tag.html }
          "5": { name: punctuation.definition.tag.end.html }
        patterns:
          - begin: (\s*|$)
            patterns:
              - { include: text.html.derivative }
            while: (?i)^(?!.*</(script|style|pre)>)
      - begin: (?i)(^|\G)\s*(?=</?[a-zA-Z]+[^\s/&gt;]*(\s|$|/?>))
        patterns:
          - { include: text.html.derivative }
        while: ^(?!\s*$)
      - begin: (^|\G)\s*(?=(<[a-zA-Z0-9\-](/?>|\s.*?>)|</[a-zA-Z0-9\-]>)\s*$)
        patterns:
          - { include: text.html.derivative }
        while: ^(?!\s*$)

  link-def:
    captures:
      "1": { name: punctuation.definition.constant.markdown }
      "2": { name: constant.other.reference.link.markdown }
      "3": { name: punctuation.definition.constant.markdown }
      "4": { name: punctuation.separator.key-value.markdown }
      "5": { name: punctuation.definition.link.markdown }
      "6": { name: markup.underline.link.markdown }
      "7": { name: punctuation.definition.link.markdown }
      "8": { name: markup.underline.link.markdown }
      "9": { name: string.other.link.description.title.markdown }
      "10": { name: punctuation.definition.string.begin.markdown }
      "11": { name: punctuation.definition.string.end.markdown }
      "12": { name: string.other.link.description.title.markdown }
      "13": { name: punctuation.definition.string.begin.markdown }
      "14": { name: punctuation.definition.string.end.markdown }
      "15": { name: string.other.link.description.title.markdown }
      "16": { name: punctuation.definition.string.begin.markdown }
      "17": { name: punctuation.definition.string.end.markdown }
    match: >
      (?x)
        \s*            # Leading whitespace
        (\[)([^]]+?)(\])(:)    # Reference name
        [ \t]*          # Optional whitespace
        (?:(<)((?:\\[<>]|[^<>\n])*)(>)|(\S+?))      # The url
        [ \t]*          # Optional whitespace
        (?:
            ((\().+?(\)))    # Match title in parens…
          | ((").+?("))    # or in double quotes…
          | ((').+?('))    # or in single quotes.
        )?            # Title is optional
        \s*            # Optional whitespace
        $
    name: meta.link.reference.def.markdown

  list_paragraph:
    begin: (^|\G)(?=\S)(?![*+->]\s|[0-9]+\.\s)
    name: meta.paragraph.markdown
    patterns:
      - { include: "#inline" }
      - { include: text.html.derivative }
      - { include: "#heading-setext" }
    while: (^|\G)(?!\s*$|#|[ ]{0,3}([-*_>][ ]{2,}){3,}[ \t]*$\n?|[ ]{0,3}[*+->]|[ ]{0,3}[0-9]+\.)

  lists:
    patterns:
      - begin: (^|\G)([ ]{0,3})([*+-])([ \t])
        beginCaptures:
          "3": { name: punctuation.definition.list.begin.markdown }
        comment: Currently does not support un-indented second lines.
        name: markup.list.unnumbered.markdown
        patterns:
          - { include: "#block" }
          - { include: "#list_paragraph" }
        while: ((^|\G)([ ]{2,4}|\t))|(^[ \t]*$)
      - begin: (^|\G)([ ]{0,3})([0-9]+[\.\)])([ \t])
        beginCaptures:
          "3": { name: punctuation.definition.list.begin.markdown }
        name: markup.list.numbered.markdown
        patterns:
          - { include: "#block" }
          - { include: "#list_paragraph" }
        while: ((^|\G)([ ]{2,4}|\t))|(^[ \t]*$)

  raw_block:
    {
      begin: '(^|\G)([ ]{4}|\t)',
      name: markup.raw.block.markdown,
      while: '(^|\G)([
        ]{4}|\t)',
    }

  separator:
    {
      match: '(^|\G)[ ]{0,3}([\*\-\_])([ ]{0,2}\2){2,}[ \t]*$\n?',
      name: meta.separator.markdown,
    }

  table:
    name: markup.table.markdown
    begin: (^|\G)(\|)(?=[^|].+\|\s*$)
    beginCaptures:
      "2": { name: punctuation.definition.table.markdown }
    while: (^|\G)(?=\|)
    patterns:
      - match: \|
        name: punctuation.definition.table.markdown
      - match: (?<=\|)\s*(:?-+:?)\s*(?=\|)
        captures:
          "1": { name: punctuation.separator.table.markdown }
      - match: (?<=\|)\s*(?=\S)((\\\||[^|])+)(?<=\S)\s*(?=\|)
        captures:
          "1":
            patterns:
              - { include: "#inline" }

  ampersand:
    comment: "Markdown will convert this for us. We match it so that the HTML grammar will not mark it up as invalid."
    match: "&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)"
    name: meta.other.valid-ampersand.markdown

  bold:
    begin: >
      (?x)
      (?<open>(\*\*(?=\w)|(?<!\w)\*\*|(?<!\w)\b__))(?=\S)
      (?=
        (
          <[^>]*+>              # HTML tags
          | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                            # Raw
          | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
          | \[
          (
              (?<square>          # Named group
                [^\[\]\\]        # Match most chars
                | \\.            # Escaped chars
                | \[ \g<square>*+ \]    # Nested brackets
              )*+
            \]
            (
              (              # Reference Link
                [ ]?          # Optional space
                \[[^\]]*+\]        # Ref name
              )
              | (              # Inline Link
                \(            # Opening paren
                  [ \t]*+        # Optional whitespace
                  <?(.*?)>?      # URL
                  [ \t]*+        # Optional whitespace
                  (          # Optional Title
                    (?<title>['"])
                    (.*?)
                    \k<title>
                  )?
                \)
              )
            )
          )
          | (?!(?<=\S)\k<open>).            # Everything besides
                            # style closer
        )++
        (?<=\S)(?=__\b|\*\*)\k<open>                # Close
      )
    captures:
      "1": { name: punctuation.definition.bold.markdown }
    end: (?<=\S)(\1)
    name: markup.bold.markdown
    patterns:
      - applyEndPatternLast: 1
        begin: (?=<[^>]*?>)
        end: (?<=>)
        patterns:
          - { include: text.html.derivative }
      - { include: "#escape" }
      - { include: "#ampersand" }
      - { include: "#bracket" }
      - { include: "#raw" }
      - { include: "#bold" }
      - { include: "#italic" }
      - { include: "#image-inline" }
      - { include: "#link-inline" }
      - { include: "#link-inet" }
      - { include: "#link-email" }
      - { include: "#image-ref" }
      - { include: "#link-ref-literal" }
      - { include: "#link-ref" }
      - { include: "#link-ref-shortcut" }
      - { include: "#strikethrough" }

  bracket:
    comment: "Markdown will convert this for us. We match it so that the HTML grammar will not mark it up as invalid."
    match: '<(?![a-zA-Z/?\$!])'
    name: meta.other.valid-bracket.markdown

  escape:
    {
      match: '\\[-`*_#+.!(){}\[\]\\>]',
      name: constant.character.escape.markdown,
    }

  image-inline:
    captures:
      "1": { name: punctuation.definition.link.description.begin.markdown }
      "2": { name: string.other.link.description.markdown }
      "4": { name: punctuation.definition.link.description.end.markdown }
      "5": { name: punctuation.definition.metadata.markdown }

      # Angle bracket link destination
      "7": { name: punctuation.definition.link.markdown }
      "8": { name: markup.underline.link.image.markdown }
      "9": { name: punctuation.definition.link.markdown }

      # Normal link destination
      "10": { name: markup.underline.link.image.markdown }

      # Title in parens
      "12": { name: string.other.link.description.title.markdown }
      "13": { name: punctuation.definition.string.begin.markdown }
      "14": { name: punctuation.definition.string.end.markdown }

      # Title in double quotes
      "15": { name: string.other.link.description.title.markdown }
      "16": { name: punctuation.definition.string.begin.markdown }
      "17": { name: punctuation.definition.string.end.markdown }

      # Title in single quotes
      "18": { name: string.other.link.description.title.markdown }
      "19": { name: punctuation.definition.string.begin.markdown }
      "20": { name: punctuation.definition.string.end.markdown }

      "21": { name: punctuation.definition.metadata.markdown }
    match: >
      (?x)
        (\!\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                      # Match the link text.
        (\()            # Opening paren for url
          # The url
            [ \t]*
            (
               (<)((?:\\[<>]|[^<>\n])*)(>)
               | ((?<url>(?>[^\s()]+)|\(\g<url>*\))*)
            )
            [ \t]*
          (?:
              ((\().+?(\)))    # Match title in parens…
            | ((").+?("))    # or in double quotes…
            | ((').+?('))    # or in single quotes.
          )?            # Title is optional
          \s*            # Optional whitespace
        (\))
    name: meta.image.inline.markdown

  image-ref:
    captures:
      "1": { name: punctuation.definition.link.description.begin.markdown }
      "2": { name: string.other.link.description.markdown }
      "4": { name: punctuation.definition.link.description.end.markdown }
      "5": { name: punctuation.definition.constant.markdown }
      "6": { name: constant.other.reference.link.markdown }
      "7": { name: punctuation.definition.constant.markdown }
    match: (\!\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(.*?)(\])
    name: meta.image.reference.markdown

  italic:
    begin: >
      (?x)
      (?<open>(\*(?=\w)|(?<!\w)\*|(?<!\w)\b_))(?=\S)                # Open
        (?=
          (
            <[^>]*+>              # HTML tags
            | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                              # Raw
            | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
            | \[
            (
                (?<square>          # Named group
                  [^\[\]\\]        # Match most chars
                  | \\.            # Escaped chars
                  | \[ \g<square>*+ \]    # Nested brackets
                )*+
              \]
              (
                (              # Reference Link
                  [ ]?          # Optional space
                  \[[^\]]*+\]        # Ref name
                )
                | (              # Inline Link
                  \(            # Opening paren
                    [ \t]*+        # Optional whtiespace
                    <?(.*?)>?      # URL
                    [ \t]*+        # Optional whtiespace
                    (          # Optional Title
                      (?<title>['"])
                      (.*?)
                      \k<title>
                    )?
                  \)
                )
              )
            )
            | \k<open>\k<open>                   # Must be bold closer
            | (?!(?<=\S)\k<open>).            # Everything besides
                              # style closer
          )++
          (?<=\S)(?=_\b|\*)\k<open>                # Close
        )
    captures:
      "1": { name: punctuation.definition.italic.markdown }
    end: (?<=\S)(\1)((?!\1)|(?=\1\1))
    name: markup.italic.markdown
    patterns:
      - applyEndPatternLast: 1
        begin: (?=<[^>]*?>)
        end: (?<=>)
        patterns:
          - { include: text.html.derivative }
      - { include: "#escape" }
      - { include: "#ampersand" }
      - { include: "#bracket" }
      - { include: "#raw" }
      - { include: "#bold" }
      - { include: "#image-inline" }
      - { include: "#link-inline" }
      - { include: "#link-inet" }
      - { include: "#link-email" }
      - { include: "#image-ref" }
      - { include: "#link-ref-literal" }
      - { include: "#link-ref" }
      - { include: "#link-ref-shortcut" }
      - { include: "#strikethrough" }

  link-email:
    captures:
      "1": { name: punctuation.definition.link.markdown }
      "2": { name: markup.underline.link.markdown }
      "4": { name: punctuation.definition.link.markdown }
    match: (<)((?:mailto:)?[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)(>)
    name: meta.link.email.lt-gt.markdown

  link-inet:
    captures:
      "1": { name: punctuation.definition.link.markdown }
      "2": { name: markup.underline.link.markdown }
      "3": { name: punctuation.definition.link.markdown }
    match: (<)((?:https?|ftp)://.*?)(>)
    name: meta.link.inet.markdown

  link-inline:
    captures:
      "1": { name: punctuation.definition.link.title.begin.markdown }
      "2":
        name: string.other.link.title.markdown
        patterns:
          - { include: "#raw" }
          - { include: "#bold" }
          - { include: "#italic" }
          - { include: "#strikethrough" }
          - { include: "#image-inline" }
      "4": { name: punctuation.definition.link.title.end.markdown }
      "5": { name: punctuation.definition.metadata.markdown }

      # Angle bracket link destination
      "7": { name: punctuation.definition.link.markdown }
      "8": { name: markup.underline.link.markdown }
      "9": { name: punctuation.definition.link.markdown }

      # Normal link destination
      "10": { name: markup.underline.link.markdown }

      # Title
      "12": { name: string.other.link.description.title.markdown }
      "13": { name: punctuation.definition.string.begin.markdown }
      "14": { name: punctuation.definition.string.end.markdown }
      "15": { name: string.other.link.description.title.markdown }
      "16": { name: punctuation.definition.string.begin.markdown }
      "17": { name: punctuation.definition.string.end.markdown }
      "18": { name: string.other.link.description.title.markdown }
      "19": { name: punctuation.definition.string.begin.markdown }
      "20": { name: punctuation.definition.string.end.markdown }
      "21": { name: punctuation.definition.metadata.markdown }
    match: >
      (?x)
        (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                      # Match the link text.
        (\()            # Opening paren for url
          # The url
            [ \t]*
            (
               (<)((?:\\[<>]|[^<>\n])*)(>)
               | ((?<url>(?>[^\s()]+)|\(\g<url>*\))*)
            )
            [ \t]*
          # The title  
          (?:
              ((\()[^()]*(\)))    # Match title in parens…
            | ((")[^"]*("))    # or in double quotes…
            | ((')[^']*('))    # or in single quotes.
          )?            # Title is optional
          \s*            # Optional whitespace
        (\))
    name: meta.link.inline.markdown

  link-ref:
    captures:
      "1": { name: punctuation.definition.link.title.begin.markdown }
      "2":
        name: string.other.link.title.markdown
        patterns:
          - { include: "#raw" }
          - { include: "#bold" }
          - { include: "#italic" }
          - { include: "#strikethrough" }
          - { include: "#image-inline" }
      "4": { name: punctuation.definition.link.title.end.markdown }
      "5": { name: punctuation.definition.constant.begin.markdown }
      "6": { name: constant.other.reference.link.markdown }
      "7": { name: punctuation.definition.constant.end.markdown }
    match: (?<![\]\\])(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])(\[)([^\]]*+)(\])
    name: meta.link.reference.markdown

  link-ref-literal:
    captures:
      "1": { name: punctuation.definition.link.title.begin.markdown }
      "2": { name: string.other.link.title.markdown }
      "4": { name: punctuation.definition.link.title.end.markdown }
      "5": { name: punctuation.definition.constant.begin.markdown }
      "6": { name: punctuation.definition.constant.end.markdown }
    match: (?<![\]\\])(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(\])
    name: meta.link.reference.literal.markdown

  link-ref-shortcut:
    captures:
      "1": { name: punctuation.definition.link.title.begin.markdown }
      "2": { name: string.other.link.title.markdown }
      "3": { name: punctuation.definition.link.title.end.markdown }
    match: (?<![\]\\])(\[)((?:[^\s\[\]\\]|\\[\[\]])+?)((?<!\\)\])
    name: meta.link.reference.markdown

  raw:
    captures:
      "1": { name: punctuation.definition.raw.markdown }
      "3": { name: punctuation.definition.raw.markdown }
    match: (`+)((?:[^`]|(?!(?<!`)\1(?!`))`)*+)(\1)
    name: markup.inline.raw.string.markdown

  strikethrough:
    captures:
      "1": { name: punctuation.definition.strikethrough.markdown }
      "2":
        patterns:
          - applyEndPatternLast: 1
            begin: (?=<[^>]*?>)
            end: (?<=>)
            patterns:
              - { include: text.html.derivative }
          - { include: "#escape" }
          - { include: "#ampersand" }
          - { include: "#bracket" }
          - { include: "#raw" }
          - { include: "#bold" }
          - { include: "#italic" }
          - { include: "#image-inline" }
          - { include: "#link-inline" }
          - { include: "#link-inet" }
          - { include: "#link-email" }
          - { include: "#image-ref" }
          - { include: "#link-ref-literal" }
          - { include: "#link-ref" }
          - { include: "#link-ref-shortcut" }
      "3": { name: punctuation.definition.strikethrough.markdown }
    match: (?<!\\)(~{2,})((?:[^~]|(?!(?<![~\\])\1(?!~))~)*+)(\1)
    name: markup.strikethrough.markdown
