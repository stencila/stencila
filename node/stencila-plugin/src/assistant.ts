/* eslint-disable @typescript-eslint/no-unused-vars */

import { InstructionBlock, InstructionInline, Node } from "@stencila/types";

/**
 * The type for the name of an assistant
 */
export type AssistantName = string;

/**
 * An assistant generation task
 */
export interface GenerateTask {
  /**
   * The instruction to be executed
   */
  instruction: InstructionBlock | InstructionInline;

  /**
   * The aggregated text of the messages in the instruction
   *
   * Available individually in the `instruction.messages` but provided here,
   * joined into a single string, for convenience.
   */
  instruction_text: string;

  /**
   * The content of the instruction, if any, formatted using the
   * `content-format` specified for the assistant in `stencila-plugin.toml`
   */
  content_formatted?: string;

  /**
   * The context of the instruction
   *
   * This is available to assistants so that they can tailor
   * their responses given the broader context of the document
   * that the instruction is within.
   */
  context?: Record<string, unknown>;

  /**
   * The input type of the task
   */
  input: "text" | "audio" | "image" | "video";

  /**
   * The output type of the task
   */
  output: "text" | "audio" | "image" | "video";

  /**
   * The desired output format of the task
   */
  format: string;

  /**
   * The rendered system prompt of the assistant
   *
   * If a `system-prompt` is specified for the assistant in `stencila-plugin.toml`
   * then this will rendered using the task itself as the content before
   * calling the plugin.
   */
  system_prompt?: string;
}

/**
 * Generation options
 *
 * TODO: Add proper typing for these options
 */
export type GenerateOptions = Record<string, unknown>;

/**
 * The output generated by an assistant
 */
export interface GenerateOutput {
  /**
   * The kind of the generated content
   *
   * Used by Stencila to determine how to handle the `content` before
   * decoding it into nodes
   */
  kind?: "text" | "url";

  /**
   * The format of the generated content
   *
   * Used by Stencila to decode the generated `content` into a set of
   * Stencila Schema nodes.
   */
  format?: string;

  /**
   * The content generated by the assistant
   */
  content?: string;

  /**
   * The nodes generated by the assistant
   *
   * If supplied then `format`, `kind` and `content` will be ignored
   * and `nodes` will be used directly.
   */
  nodes?: Node[];
}

export abstract class Assistant {
  /**
   * Get the system prompt of the assistant
   *
   * This method is called by Stencila before executing an
   * `InstructionBlock` or `InstructionInline` node so that the
   * assistant can provide a system prompt template to delegates.
   *
   * It receives a `GenerateTask` and `GenerateOptions` and should
   * return a `string`. This default implementation returns an
   * empty string.
   *
   * @param task The task to create a system prompt template for
   * @param options Options for generation
   *
   * @return string
   */
  async systemPrompt(
    task: GenerateTask,
    options: GenerateOptions,
  ): Promise<string> {
    return "";
  }

  /**
   * Execute an instruction using an assistant
   *
   * This method is called by Stencila when executing `InstructionBlock` and
   * `InstructionInline` nodes.
   *
   * It receives a `GenerateTask` and `GenerateOptions` and should return
   * a `GenerateOutput`. This default implementation raises an error.
   *
   * @param task The task to execute
   * @param options Options for generation
   *
   * @return GenerateOutput
   */
  async performTask(
    task: GenerateTask,
    options: GenerateOptions,
  ): Promise<GenerateOutput> {
    throw new Error(
      "Method `performTask` must be implemented by plugins that provide an assistant",
    );
  }
}
