/**
 * A script to generate example `*.html` files and `../examples/examples.ts`.
 *
 * Run using `npm run update:examples`.
 *
 * To add an example,
 *
 * 1. write a `function` with a camelCased name that begins with the
 *    type of the top level node e.g. `articleDrosophila`, `datatableTitanic` and creates
 *    a HTML file with the same name (e.g. `articleDrosophila.html`) in `../examples/`
 *
 * 2. add the function to the `EXAMPLES` array.
 *
 * Examples are best generated by Encoda, since Thema targets the HTML that
 * it generates. Having said that, you _could_ generate examples using other tools 🛠️,
 * or even write HTML by hand ✍️.
 *
 * In some cases, examples are also converted to YAML (e.g. `articleDrosophila.yaml`)
 * by Encoda to be able to more easily see which nodes are being decoded from the source
 * format e.g. JATS, but not being encoded to HTML (ie. missing from example pages).
 */

import { convert, read, write } from '@stencila/encoda'
import { transformSync } from '@stencila/encoda/dist/util/transform'
import schema from '@stencila/schema'
import fs from 'fs'
import path from 'path'

const EXAMPLES = [
  articleReadme,
  articleKitchenSink,
  articleDrosophila,
  articleReplication,
  articleAntibodies,
  articlePests,
  epitopepredict,
]

/**
 * Given a filename, return its path within the examples folder.
 */
const ex = (filename: string): string =>
  path.join(__dirname, '..', 'examples', filename)

/**
 * Call Encoda `convert` with options required for the HTML used by this repo.
 */
const build = (
  input: string,
  outputs: string | string[]
): Promise<string | undefined> =>
  convert(input, outputs, { encodeOptions: { isStandalone: false } })

/**
 * The README of this repo to be used as the default page of the demo
 * at https://stencila.github.io/thema.
 */
function articleReadme(): Promise<string | undefined> {
  return build(
    path.join(__dirname, '..', '..', 'README.md'),
    ex('articleReadme.html')
  )
}

/**
 * A kitchen sink article intended to have at
 * least one of every node type.
 */
function articleKitchenSink(): Promise<string | undefined> {
  return build(ex('articleKitchenSink.json'), ex('articleKitchenSink.html'))
}

/**
 * An article on cellular immune response
 */
function epitopepredict(): Promise<string | undefined> {
  return build(ex('epitopepredict.json'), ex('epitopepredict.html'))
}

/**
 * An eLife article on fruit fly.
 */
function articleDrosophila(): Promise<string | undefined> {
  return build(
    'https://elifesciences.org/articles/49574v2',
    ex('articleDrosophila.html')
  )
}

/**
 * A relatively short eLife article on pest control.
 */
function articlePests(): Promise<string | undefined> {
  return build(
    'https://elifesciences.org/articles/60912',
    ex('articlePests.html')
  )
}

/**
 * An eLife Executable Research Article.
 *
 * This function fetches the JATS XML of an existing
 * eLife article, converts it to JSON, and "enriches" it by
 * replacing some of the figures and inline numbers with
 * `CodeChunk`s and `CodeExpression`s. It then encodes
 * the example as HTML.
 *
 * The primary purpose of this example is to be able to
 * test the styling of those elements within a complete
 * example.
 */
async function articleReplication(): Promise<string | undefined> {
  const article = await read('https://elifesciences.org/articles/30274v2')

  // Outputting to JSON can be useful to see what to replace
  // await write(article, ex('articleReplication.json'))

  const era = transformSync(article, (node) => {
    if (schema.isA('Figure', node)) {
      const { id } = node
      if (id === 'fig2' || id === 'fig3') {
        // Make the static `content` of the `Figure` (an `ImageObject`)
        // the `outputs` of a `CodeChunk` that also includes the R source code
        node.content = [
          schema.codeChunk({
            programmingLanguage: 'r',
            text: fs.readFileSync(
              ex(`articleReplicationFigure${id.slice(-1)}.R`),
              'utf8'
            ),
            outputs:
              node.content === undefined
                ? undefined
                : Array.isArray(node.content)
                ? node.content
                : [node.content],
          }),
        ]
      }
    } else if (schema.isA('Paragraph', node)) {
      // For one paragaph, insert some `CodeExpression`s using R source
      // from the RMarkdown at https://raw.githubusercontent.com/stencila/examples/master/elife-30274/sources/Replication_Study_48.Rmd
      if (
        node.content[0]
          ?.toString()
          .startsWith('To test whether c-Myc expression')
      ) {
        node.content = node.content.reduce(
          (prev: schema.InlineContent[], child) => {
            if (
              typeof child === 'string' &&
              child.startsWith(
                '). For silent genes, 74% of the genes increased'
              )
            ) {
              return [
                ...prev,
                '). For silent genes, ',
                schema.codeExpression({
                  programmingLanguage: 'r',
                  text: 'round(length(which((silent_1hr_l1-silent_0hr_l1)>0))/length(silent_0hr_l1)*100)',
                  output: 74,
                }),
                '% of the genes increased from 0 hr to 1 hr, ',
                schema.codeExpression({
                  programmingLanguage: 'r',
                  text: 'round(length(which((silent_1hr_l1-silent_0hr_l1)>0))/length(silent_0hr_l1)*100)',
                  output: 66,
                }),
                '% increased from 0 hr to 24 hr, and 50% increased from 1 hr to 24 hr, corresponding to a ',
                schema.codeExpression({
                  programmingLanguage: 'r',
                  text: 'round(median(silent_1hr_l1)/median(silent_0hr_l1),2)',
                  output: 1.1,
                }),
                ' and ',
                schema.codeExpression({
                  programmingLanguage: 'r',
                  text: 'round(median(silent_24hr_l1)/median(silent_0hr_l1),2)',
                  output: 1.5,
                }),
                ' times increase, and a 0.05 times decrease in median expression, respectively (',
              ]
            }
            return [...prev, child]
          },
          []
        )
      }
    }
    return node
  })

  await write(era, ex('articleReplication.html'), { isStandalone: false })
  return Promise.resolve(undefined)
}

/**
 * A PLoS article.
 */
function articleAntibodies(): Promise<string | undefined> {
  return build(
    'https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007207',
    ex('articleAntibodies.html')
  )
}

// Run each function
Promise.all(EXAMPLES.map((example) => example())).catch((err) =>
  console.error(err)
)

// Generate `../examples/examples.ts`
fs.writeFileSync(
  ex('examples.ts'),
  `
// Generated by generate/${path.basename(__filename)}. Do not edit.

/**
 * Map of example names
 */
export const examples: {
  ${EXAMPLES.map((example) => `${example.name}: string`).join('\n  ')}
} = {
  ${EXAMPLES.map((example) => `${example.name}: '${example.name}'`).join(
    ',\n  '
  )}
}
`.trimLeft()
)
