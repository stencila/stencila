import fs from 'fs'
import globby from 'globby'
import path from 'path'

if (module.parent === null) {
  const [func, arg1] = process.argv.slice(2)
  if (func === 'create') create(arg1)
  else if (func === 'update') update()
  else console.error(`Unrecognised function: ${func}`)
}

/**
 * Create a new extension folder in `../extensions/`.
 *
 * Run using `npm run create:extension -- <name-of-extension>`.
 *
 * Creates the folder and populates with the necessary files
 * containing placeholder content.
 */
function create(name?: string): void {
  // Check that a name has been supplied
  if (name === undefined) {
    console.log(`You must supply an extension name`)
    process.exit(1)
  }

  const extensionDir = path.join(__dirname, '..', 'extensions', name)

  // Check that the extension does not already exist
  if (fs.existsSync(extensionDir)) {
    console.log(`Addon "${name}" already exists: ${extensionDir}`)
    process.exit(1)
  } else {
    fs.mkdirSync(extensionDir)
  }

  // Create necessary files
  fs.writeFileSync(
    path.join(extensionDir, 'README.md'),
    `# ${name[0].toUpperCase()}${name.slice(1)} extension

<!-- Add a description of your extension and notes for contributors. -->\n`
  )

  fs.writeFileSync(
    path.join(extensionDir, 'index.ts'),
    `// Do any initialization that your extension requires here.\n\nexport {}\n`
  )

  fs.writeFileSync(
    path.join(extensionDir, 'styles.css'),
    `/* Add your extension's styles to this file */\n`
  )

  // Update `extensions.ts` etc
  update(false)
}

/**
 * Generate `../extensions/index.ts`.
 *
 * Run using `npm run update:extensions`.
 *
 * If an extension has a `update.{js|ts}` file that will be run
 * also (if `all` is `true`).
 */
function update(all = true): void {
  const extensionsDir = path.join(__dirname, '..', 'extensions')

  // Get the list of extensions
  const extensions = globby.sync('*', {
    onlyDirectories: true,
    cwd: extensionsDir,
  })

  extensions.forEach((extension) => {
    const extensionDir = path.join(extensionsDir, extension)

    // Check each extension has the necessary files
    ;['README.md', 'styles.css'].forEach((file) => {
      const files = globby.sync(file, {
        onlyFiles: true,
        cwd: extensionDir,
      })
      if (files.length !== 1) {
        console.error(`Extension "${extension}" must have one "${file}" file`)
        process.exit(1)
      }
    })

    // Run the update script if it is present
    if (all) {
      import(path.join(extensionDir, 'update')).catch((error: Error) => {
        if (!error.message.startsWith('Cannot find module')) {
          console.error(error)
          process.exit(1)
        }
      })
    }
  })

  // Write all extensions to `extensions.ts`
  fs.writeFileSync(
    path.join(__dirname, '..', 'extensions', 'index.ts'),
    `// Generated by scripts/${path.basename(__filename)}. Do not edit.

/**
 * Map of extension Javascript modules
 */
export const extensions: {
  ${extensions
    .map(
      (extension) =>
        `${
          /^\w+$/.test(extension) ? extension : `'${extension}'`
        }: '${extension}'`
    )
    .join('\n  ')}
} = {
  ${extensions
    .map(
      (extension) =>
        `${
          /^\w+$/.test(extension) ? extension : `'${extension}'`
        }: '${extension}',`
    )
    .join('\n  ')}
}\n`
  )
}
